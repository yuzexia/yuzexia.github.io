{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1493964827876},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1493964827877},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1493964827898},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1493964827898},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1493964827899},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1493964827899},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1493964827899},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1493964827900},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1493964827901},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1493964827901},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1493964827902},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1493964827903},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1493964827904},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1493964827896},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1493964828078},{"_id":"themes/next/_config.yml","hash":"48eace7e6673f854ab1950741c61337b79f2e04a","modified":1494311192526},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1494222736686},{"_id":"source/_posts/ueditor去除自动保存-md.md","hash":"9236a8240a1d58105f18ac67df29c55707634278","modified":1504669453362},{"_id":"source/_posts/终于成功了.md","hash":"a6b0d5d5374f6d3a6ce20988f705a6134415ab09","modified":1494315953108},{"_id":"source/_posts/contenteditable.md","hash":"4cdaee9c5936cd8823ffb9333316523348fd9df2","modified":1502778397212},{"_id":"source/_posts/Location-Object.md","hash":"a313a5e0947a0a688db2dd4fd27636c0da81dff5","modified":1502778419634},{"_id":"source/_posts/react-native-1.md","hash":"190a3cad05ab4210e6ef890834a06887bc27f01e","modified":1502778441436},{"_id":"source/_posts/函数表达式.md","hash":"125d406c5cda5d682de46e1152772d1009668cb5","modified":1502778355149},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1493964827897},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1493964827898},{"_id":"source/_posts/cartoon Redux.md","hash":"7664f44eba3396eceda59fbe29b858aa4fc1fc37","modified":1502778379602},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1493964827905},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1493964827905},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1493964827906},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1493964827906},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1493964827907},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1493964827908},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1493964827908},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1493964827910},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1493964827911},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1493964827909},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1493964827911},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1493964827913},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1493964827911},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1493964827912},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1493964828075},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1493964828075},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1493964828077},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1493964828077},{"_id":"themes/next/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1493964828076},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1493964828076},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1493964828077},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1493964828079},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1493964828237},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1493964828080},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1493964828238},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1493964828237},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1493964827859},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1493964827867},{"_id":"themes/next/.git/packed-refs","hash":"ea7ad1124ad5d270ea6886ed9bc1735a307e10c7","modified":1493964827851},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1493964792344},{"_id":"themes/next/.git/index","hash":"d272e5b086213932ec34c8d2b90619d3a7ddd60f","modified":1494311118752},{"_id":"source/_posts/string-function.md","hash":"b26b16ea21a2fe8cc7de4ee4698da78b84a495f7","modified":1506048211329},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828140},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493964827913},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1493964828034},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1493964828033},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493964827913},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1493964828035},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1493964828039},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1493964828038},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1493964828038},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1493964828047},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1493964828052},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1493964828039},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1493964828067},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1493964828067},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1493964828068},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1493964828069},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1493964828069},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1493964827914},{"_id":"themes/next/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1493964827915},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1493964827914},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1493964828031},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1493964828033},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1493964828032},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1493964828048},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1493964828139},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1493964828141},{"_id":"themes/next/source/images/alipay.png","hash":"fd4a0cf9c1fdbfa12d2f1459c53e0c48e5d4e590","modified":1494310693438},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1493964828141},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1493964828141},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1493964828144},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1493964828144},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1493964828145},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1493964828145},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1493964828143},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1493964828145},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493964828146},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493964828146},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1493964828147},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1493964828147},{"_id":"themes/next/source/images/wechatpay.png","hash":"2f6448b3bf1aa783cce80dae9007ebc3584484d0","modified":1494310670925},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1493964828081},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1493964828081},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1493964828082},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1493964828082},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1493964828083},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1493964828083},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1493964792403},{"_id":"themes/next/.git/logs/HEAD","hash":"bb4c52fb5c46813fb21fb39ce7207a07c71f0f77","modified":1493964827863},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828050},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828050},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828121},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828120},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828135},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828122},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828137},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1493964792346},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1493964792399},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1493964792398},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1493964792347},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1493964828147},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1493964792401},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1493964792400},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1493964792401},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1493964828036},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1493964828037},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1493964828040},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1493964828041},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1493964828041},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1493964828044},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1493964828042},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1493964828043},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1493964828046},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1493964828051},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1493964828049},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1493964828053},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1493964828055},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1493964828054},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1493964828056},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1493964828056},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1493964828057},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1493964828057},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1493964828058},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1493964828058},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1493964828059},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1493964828059},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1493964828060},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1493964828061},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1493964828061},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1493964828062},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1493964828063},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1493964828064},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1493964828063},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1493964828071},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1493964828072},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1493964828073},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1493964828074},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1493964828064},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1493964828120},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1493964828121},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1493964828122},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1493964828135},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1493964828136},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1493964792402},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1493964828149},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1493964828149},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1493964828137},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1493964828148},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1493964828150},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1493964828151},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1493964828149},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1493964828153},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1493964828151},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1493964828154},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1493964828152},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1493964828165},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1493964828172},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1493964828172},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1493964828153},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1493964828173},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1493964828185},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1493964828187},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1493964828188},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1493964828186},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1493964828190},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1493964828192},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1493964828192},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1493964828193},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1493964828191},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1493964828213},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1493964828215},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1493964828215},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1493964828217},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1493964828218},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1493964828218},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1493964828219},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1493964828216},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1493964828221},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1493964828220},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1493964828229},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1493964828229},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1493964828235},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1493964828236},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1493964828235},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1493964828171},{"_id":"themes/next/.git/refs/heads/master","hash":"a0d23dcebcf453c784363ae5568d6ae419497a81","modified":1493964827862},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1493964792402},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1493964828214},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1493964792400},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1493964828070},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1493964828071},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1493964828085},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1493964828085},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1493964828087},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1493964828087},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1493964828088},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1493964828097},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1493964828108},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1493964828117},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1493964828117},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1493964828118},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1493964828118},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1493964828116},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1493964828119},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1493964828123},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1493964828124},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1493964828125},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1493964828124},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493964828126},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1493964828126},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1493964828127},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1493964828129},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1493964828129},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493964828130},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1493964828129},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1493964828130},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1493964828132},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1493964828132},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1493964828132},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1493964828133},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1493964828134},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1493964828134},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1493964828152},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1493964828164},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1493964828162},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493964828173},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493964828174},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493964828174},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1493964828181},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493964828176},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1493964828184},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1493964828189},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1493964828189},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1493964828194},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1493964828194},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1493964828196},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493964828177},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493964828175},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1493964828183},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1493964828228},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1493964828228},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"bb4c52fb5c46813fb21fb39ce7207a07c71f0f77","modified":1493964827864},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1493964827857},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1493964828159},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1493964828161},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1493964828212},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1493964828233},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1493964828211},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1493964828088},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1493964828089},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1493964828089},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1493964828090},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1493964828091},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1493964828091},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1493964828093},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1493964828093},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1493964828094},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1493964828095},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1493964828095},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1493964828095},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1493964828096},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1493964828097},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1493964828098},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1493964828098},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1493964828099},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1493964828099},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1493964828100},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1493964828100},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1493964828100},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1493964828101},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1493964828101},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1493964828102},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1493964828102},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1493964828102},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1493964828103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1493964828103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1493964828105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1493964828105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1493964828103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1493964828106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1493964828107},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1493964828107},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1493964828108},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1493964828106},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1493964828109},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1493964828108},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1493964828109},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1493964828110},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1493964828111},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1493964828111},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1493964828112},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1493964828113},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1493964828114},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1493964828112},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1493964828114},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1493964828114},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1493964828115},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1493964828115},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1493964828115},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1493964828127},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493964828128},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493964828131},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1493964828155},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1493964828156},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493964828177},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1493964828178},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1493964828156},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1493964828158},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1493964828180},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1493964828198},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"bb4c52fb5c46813fb21fb39ce7207a07c71f0f77","modified":1493964827857},{"_id":"themes/next/.git/objects/pack/pack-62303accec2bf8df947bf654fee2a2192f7d3530.idx","hash":"3a15219d9e27320dd176ac422451cf11c74bb4a4","modified":1493964827442},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1493964828201},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1493964828210},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1493964828179},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1493964828180},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1493964828181},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1493964828170},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1493964828226},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1493964828207},{"_id":"themes/next/.git/objects/pack/pack-62303accec2bf8df947bf654fee2a2192f7d3530.pack","hash":"5fa4aeffe45866d053e6d431320661f39648c85c","modified":1493964827652},{"_id":"public/2017/08/14/contenteditable/index.html","hash":"5f7cc5bfaf326015299588545f1a4425060a0372","modified":1506048473110},{"_id":"public/2017/05/08/终于成功了/index.html","hash":"328e8c5bc3df6669a057a701c2e91fb45b47a923","modified":1506048473111},{"_id":"public/2017/05/08/hello-world/index.html","hash":"6131f427676faa7b232e3f6c3d9919fb8cc3bb1c","modified":1506048473111},{"_id":"public/archives/index.html","hash":"e77f6776b11da2bca12d73e0fa79bd3b70362b63","modified":1506048473111},{"_id":"public/archives/2017/index.html","hash":"4f3494b2653003072928b19af7b8ebf79f0e8443","modified":1506048473111},{"_id":"public/archives/2017/05/index.html","hash":"2e807a15029dfa5c5b4e93e23bf9cba5ec620a74","modified":1506048473111},{"_id":"public/archives/2017/06/index.html","hash":"e2311ebceb86c4f75b194789d0b6e819ba704abc","modified":1506048473111},{"_id":"public/archives/2017/08/index.html","hash":"4f981cc758b9be3c9e0a5fd0d5cdb837d3b7f94d","modified":1506048473111},{"_id":"public/tags/html5/index.html","hash":"84add7ff0fa9bdb44065bef6867e5a2e7bcb5487","modified":1506048473112},{"_id":"public/tags/contenteditable/index.html","hash":"e250937fe2912fea88b7b305eaf86161516afbf0","modified":1506048473112},{"_id":"public/tags/javascript/index.html","hash":"615910f3834f6d15dbceaf363996b49da980f251","modified":1506048473112},{"_id":"public/tags/react-native/index.html","hash":"9da5822a0a7a2372f95191f33f041f3cd3c1721b","modified":1506048473113},{"_id":"public/tags/object/index.html","hash":"c86de90954139a04b17c3610969d72d055c66f93","modified":1506048473113},{"_id":"public/tags/location/index.html","hash":"870fa545cab978861e53c32db51146fee7dc07e7","modified":1506048473113},{"_id":"public/tags/redux/index.html","hash":"27338a0b5efad4801f0f8805bfec85ea05bec894","modified":1506048473113},{"_id":"public/2017/08/15/react-native-1/index.html","hash":"9d31390db35418cfc2340781a96dd5c2529e464d","modified":1506048473113},{"_id":"public/2017/06/07/cartoon Redux/index.html","hash":"c14f1fc36c22322f43a302337b4e4f1e9c992a63","modified":1506048473113},{"_id":"public/2017/05/09/Location-Object/index.html","hash":"964bcfa04ca4e46d377c78242ae7edf1e9268020","modified":1506048473113},{"_id":"public/2017/05/09/函数表达式/index.html","hash":"7e04496c4582e78b4c02d7de3da09af433b6a5f5","modified":1506048473113},{"_id":"public/index.html","hash":"15e327507d18eef4fdab8fa0362609cdbba8ccdb","modified":1506048473113},{"_id":"public/2017/09/06/ueditor去除自动保存-md/index.html","hash":"0269e81dd165b60f5637a50e4f9ebb91a3518fae","modified":1506048473173},{"_id":"public/archives/2017/09/index.html","hash":"3f9581929ee4915dc499dac05a2f5ebefe48ca93","modified":1506048473174},{"_id":"public/tags/ueditor/index.html","hash":"b194fb5968891962136d6f53f9a15cc7b8b2bcd4","modified":1506048473174},{"_id":"public/tags/富文本编辑器/index.html","hash":"0a0404684add7fc31dd7cbf35dfb8647ae663069","modified":1506048473174},{"_id":"public/2017/09/22/string-function/index.html","hash":"38b03188da1aa2161fec1d2c21038330efce9317","modified":1506048473174},{"_id":"public/tags/string/index.html","hash":"559ccf774f02a4cd895c24e48fcb2508e7ec0abe","modified":1506048473176},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506048473176},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1506048473177},{"_id":"public/images/alipay.png","hash":"fd4a0cf9c1fdbfa12d2f1459c53e0c48e5d4e590","modified":1506048473177},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1506048473177},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1506048473177},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1506048473177},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1506048473177},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1506048473177},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1506048473177},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1506048473177},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506048473177},{"_id":"public/images/wechatpay.png","hash":"2f6448b3bf1aa783cce80dae9007ebc3584484d0","modified":1506048473177},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1506048473177},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506048473178},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1506048473178},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506048473178},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1506048473178},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506048473178},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506048473178},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506048473178},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1506048473178},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506048473178},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506048473178},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506048473178},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506048473178},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506048473178},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506048473178},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506048473178},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506048473178},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1506048473178},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1506048474034},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1506048474034},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506048474036},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506048474036},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1506048474036},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1506048474036},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1506048474036},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1506048474036},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1506048474036},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1506048474036},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506048474036},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1506048474036},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506048474036},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1506048474036},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1506048474036},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1506048474036},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1506048474036},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1506048474036},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506048474036},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506048474037},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1506048474037},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1506048474037},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506048474037},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506048474037},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1506048474037},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506048474037},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506048474037},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506048474037},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506048474037},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506048474037},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506048474037},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506048474037},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506048474037},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506048474037},{"_id":"public/css/main.css","hash":"423fb4557303ad7545c6231156dba1f9336e44a0","modified":1506048474037},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1506048474037},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1506048474038},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1506048474038},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506048474038},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506048474038},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1506048474039},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1506048474039},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506048474039},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506048474039},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506048474039},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1506048474039},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1506048474039},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506048474039},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1506048474039},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1506048474039},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506048474039},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1506048474039},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506048474039},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506048474040},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1506048474041},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506048474041},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506048474041},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506048474041},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1506048475946}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-08T05:52:16.681Z","updated":"2017-05-08T05:52:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh7m0000lk90c1ihga08","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"div模拟textarea文本域轻松实现高度自适应","date":"2017-08-14T03:53:07.000Z","_content":"\n\n> 在工作中会用到textarea文本域自适应输入的内容的情况，今天我们根据HTML5的新属性contenteditable来实现这个功能。\n\n\n\n","source":"_posts/contenteditable.md","raw":"---\ntitle: div模拟textarea文本域轻松实现高度自适应\ndate: 2017-08-14 11:53:07\ntags: [html5,contenteditable]\n---\n\n\n> 在工作中会用到textarea文本域自适应输入的内容的情况，今天我们根据HTML5的新属性contenteditable来实现这个功能。\n\n\n\n","slug":"contenteditable","published":1,"updated":"2017-08-15T06:26:37.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh7s0001lk90t2e2ykdd","content":"<blockquote>\n<p>在工作中会用到textarea文本域自适应输入的内容的情况，今天我们根据HTML5的新属性contenteditable来实现这个功能。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在工作中会用到textarea文本域自适应输入的内容的情况，今天我们根据HTML5的新属性contenteditable来实现这个功能。</p>\n</blockquote>\n"},{"title":"ueditor去除自动保存.md","date":"2017-09-06T03:43:10.000Z","_content":"","source":"_posts/ueditor去除自动保存-md.md","raw":"---\ntitle: ueditor去除自动保存.md\ndate: 2017-09-06 11:43:10\ntags: [javascript, ueditor, 富文本编辑器]\n---\n","slug":"ueditor去除自动保存-md","published":1,"updated":"2017-09-06T03:44:13.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh7w0002lk90oziip1l4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"初识React-native（一）","date":"2017-08-15T01:59:44.000Z","_content":"\n### 安装node.js\n\n### 设置淘宝镜像\n\n> 在node.js安装目录  => node_modules => npm => npmrc添加下面代码\n\n```\nregistry=https://registry.npm.taobao.org\n```\n<!-- more -->\n### 安装react-native\n\n```\nnpm install react-native-cli\n```\n\n### 初始化项目\n\n```\nreact-native init <项目名>\n```\n\n### 启动项目\n\n```\nTo run your app on iOS:\n   cd E:\\mine\\yuzexia\\myFirstRNApp\n   react-native run-ios\n   - or -\n   Open ios\\myFirstRNApp.xcodeproj in Xcode\n   Hit the Run button\nTo run your app on Android:\n   cd E:\\mine\\yuzexia\\myFirstRNApp\n   Have an Android emulator running (quickest way to get started), or a device connected\n   react-native run-android\n```\n","source":"_posts/react-native-1.md","raw":"---\ntitle: 初识React-native（一）\ndate: 2017-08-15 09:59:44\ntags: [javascript, react-native]\n---\n\n### 安装node.js\n\n### 设置淘宝镜像\n\n> 在node.js安装目录  => node_modules => npm => npmrc添加下面代码\n\n```\nregistry=https://registry.npm.taobao.org\n```\n<!-- more -->\n### 安装react-native\n\n```\nnpm install react-native-cli\n```\n\n### 初始化项目\n\n```\nreact-native init <项目名>\n```\n\n### 启动项目\n\n```\nTo run your app on iOS:\n   cd E:\\mine\\yuzexia\\myFirstRNApp\n   react-native run-ios\n   - or -\n   Open ios\\myFirstRNApp.xcodeproj in Xcode\n   Hit the Run button\nTo run your app on Android:\n   cd E:\\mine\\yuzexia\\myFirstRNApp\n   Have an Android emulator running (quickest way to get started), or a device connected\n   react-native run-android\n```\n","slug":"react-native-1","published":1,"updated":"2017-08-15T06:27:21.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh800004lk90c10yohwd","content":"<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><h3 id=\"设置淘宝镜像\"><a href=\"#设置淘宝镜像\" class=\"headerlink\" title=\"设置淘宝镜像\"></a>设置淘宝镜像</h3><blockquote>\n<p>在node.js安装目录  =&gt; node_modules =&gt; npm =&gt; npmrc添加下面代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"安装react-native\"><a href=\"#安装react-native\" class=\"headerlink\" title=\"安装react-native\"></a>安装react-native</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install react-native-cli</div></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init &lt;项目名&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">To run your app on iOS:</div><div class=\"line\">   cd E:\\mine\\yuzexia\\myFirstRNApp</div><div class=\"line\">   react-native run-ios</div><div class=\"line\">   - or -</div><div class=\"line\">   Open ios\\myFirstRNApp.xcodeproj in Xcode</div><div class=\"line\">   Hit the Run button</div><div class=\"line\">To run your app on Android:</div><div class=\"line\">   cd E:\\mine\\yuzexia\\myFirstRNApp</div><div class=\"line\">   Have an Android emulator running (quickest way to get started), or a device connected</div><div class=\"line\">   react-native run-android</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><h3 id=\"设置淘宝镜像\"><a href=\"#设置淘宝镜像\" class=\"headerlink\" title=\"设置淘宝镜像\"></a>设置淘宝镜像</h3><blockquote>\n<p>在node.js安装目录  =&gt; node_modules =&gt; npm =&gt; npmrc添加下面代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>","more":"<h3 id=\"安装react-native\"><a href=\"#安装react-native\" class=\"headerlink\" title=\"安装react-native\"></a>安装react-native</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install react-native-cli</div></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init &lt;项目名&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">To run your app on iOS:</div><div class=\"line\">   cd E:\\mine\\yuzexia\\myFirstRNApp</div><div class=\"line\">   react-native run-ios</div><div class=\"line\">   - or -</div><div class=\"line\">   Open ios\\myFirstRNApp.xcodeproj in Xcode</div><div class=\"line\">   Hit the Run button</div><div class=\"line\">To run your app on Android:</div><div class=\"line\">   cd E:\\mine\\yuzexia\\myFirstRNApp</div><div class=\"line\">   Have an Android emulator running (quickest way to get started), or a device connected</div><div class=\"line\">   react-native run-android</div></pre></td></tr></table></figure>"},{"title":"函数表达式","date":"2017-05-09T06:31:41.000Z","_content":"\n## 函数表达式\n\n1. 函数声明\n> 函数声明语法\n\n```javascript\nfunction funName(){\n    //函数体\n}\n```\nfunction是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。\n```javascript\nconsole.log(funName.name); //funName可以使用arguments.callee自调用\n\n```\n<!-- more -->\n> 重要的特性\n\n函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，\n意味着，**可以把函数声明放在调用它的语句后面**\n\n```javascript\nabc();  //\"1\"\nfunction abc(){\n    console.log('1');\n}\n```\n上述代码能够正常执行\n\n2. 函数表达式\n\n> 函数声明的几种形式\n- 最常见的一种形式\n```javascript\nvar funcName = function(){\n    //函数体\n}\n```\n\n创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为**匿名函数(anonymous function)**，因为function后面没有标识符。\n> 匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。\n\n函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。\n```javascript\nabc();\nvar abc = function(){\n    console.log(\"1\");\n}\n//报错：Uncaught TypeError: abc is not a function\n```\n\n理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：\n> 思考题\n```javascript\n//不要这么做\nif(isOk){\n    function sayHello(){\n        console.log('hello');\n    }\n}else{\n    function sayHello(){\n        console.log('world');\n    }\n}\n```\n结果是什么？\n> 从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义    \n实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。    \n但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，    \n因此使用这种方式很危险\n\n使用函数表达式就不会有这种问题\n```javascript\n//可以这样做\nvar sayHello;\nif(isOk){\n    sayHello = function(){\n        alert('hello');\n    }\n}else{\n    sayHello = function(){\n        alert('world!');\n    }\n}\n```\n能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。\n\n\n#### 7.1 递归\n> 递归函数是在一个函数通过名字调用自身的情况下构成的\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * count(num-1);\n    }\n}\n```\n> 上述代码是经典的阶乘函数    \n虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错\n\n```javascript\nvar anotherCount = count;\ncount = null;\nalert(anotherCount(4))  // 报错:count is not a function\n```\n>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。    \n但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错\"count is not a function\"\n\n> 在这种情况下，使用arguments.callee可以解决这个问题    \narguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * arguments.callee(num-1);\n    }\n}\n```\n\n通过使用`arguments.callee`代替函数名，可以确保无论怎么样调用函数都不会出问题，    \n因此，在编写函数递归调用时，使用`arguments.callee`总比使用函数名更保险。\n\n> 不过在严格模式下，\"严格模式\"（strict mode）不能通过脚本访问`arguments.callee`，访问这个属性将会报错。    \n不过可以使用命名函数表达式来达成相同的结果。\n\n```javascript\n'strict mode'   //严格模式\nvar count = (function f(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * f(num-1);\n    }\n});\n```\n>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量   \n函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。\n\n#### 7.2 闭包\n###### 概念\n> 闭包是指有权访问另一个函数作用域中的变量的函数\n创建闭包最常见的方式，就是在一个函数内部创建另一个函数。\n\n为什么还能够访问内部变量？\n>  是因为内部函数的作用域中包含父函数的作用域。\n\n###### 作用域链\n> 当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。   \n-->   \n然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。   \n-->   \n但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，...     \n直至作为作用域链终点的全局执行环境。   \n\n> 在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。\n```javascript\nfunction compare(value1, value2){\n    if(value1 < value2){\n        return -1;\n    } else if(value1 > value2){\n        return 1;\n    } else {\n        return 0;\n    }\n}\n```\n上述代码：\n1. 定义compare()函数\n2. 在全局作用域中调用它\n3. 当调用compare()时，会创建一个包含arguments,value1,value2的活动对象\n4. 全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。\n\n\ncompare()函数执行时的作用域链关系图\n\n![图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1489995952212&di=de4fccb3e1965772e5ac835604c69019&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg)\n\n后台每个执行环境都有一个表示变量的对象----**变量对象**。   \n**全局环境**的变量对象始终存在，而像`compare()`函数这样的**局部环境**的变量对象   \n则只在*函数执行*的过程中存在。\n\n- 在创建`compare()`函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的`[[Scope]]`属性中\n- 当调用`compare()`函数时，会为函数创建一个*执行环境*，然后通过复制函数的`[[Scope]]`属性中的对象构建起执行环境的作用域链接。\n- 此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端\n\n> 对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：\n1. 本地变量对象\n2. 全局变量对象\n> 作用域链*本质上*是一个指向*变量对象*的*指针列表*，它只包含**引用**但不实际包含**对象**。\n\n在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。   \n一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）   \n但是，***闭包***的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁\n\n> [注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。\n\n```javascript\n//创建函数\nvar compareNames = createComparisonFunction(\"name\");\n//调用函数\nvar result = compareNames({name:\"Nicholas\"},{name:\"Greg\"});\n//解除对匿名函数的引用(以便释放内存)\ncompareNames = null;\n/*首先，创建的比较函数被保存在变量compareNames中，\n而通过将compareNames设置为等于null，解除该函数的引用，\n就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，\n其他作用域(除了全局作用域)也都安全地销毁了。*/\n```\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n> 由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。   \n过度使用闭包可能会导致内存占用过多，   \nV8 javascript引擎会尝试回收被闭包占用的内存。\n\n##### 7.2.1 闭包和变量\n> 作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    \n\n闭包保存的是**整个变量对象**，而不是**某个特殊的值**。\n\n```javascript\nfunction createFunctions (){\n    var result = new Array();\n    \n    for (var i=0;i<10;i++){\n        result[i] = function(){\n            return i;\n        };\n    }\n    return result;\n}\n```\n这个函数会返回一个值。结果是每个函数都返回10.   \n因为每个函数的作用域中都保存着createFunctions()函数的活动对象，\n所以他们引用的都是同一个变量i。\n当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i\n的同一个变量对象，\n所以每个函数内部i的值都是10。\n\n![闭包](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png)\n```\nScopes[2]\nClosure (createFunctions)\ni:10\n```\n我们可以通过创建另一个匿名函数强制让闭包的行为符合预期\n\n```\nfunction createFunctions(){\n    var result = new Array();\n    \n    for(var i = 0;i < 10; i++){\n        result[i] = function(num){\n           return function(){\n               return num;\n           } \n        }(i)\n    }\n    return result;\n}\n```\n![closure-2](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png)\n\n改写后的createFunctions()函数，每个函数都会返回不同的索引值了。\n没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。\n这里的匿名函数有一个参数num，也就是最终要返回的值。\n在调用每个匿名函数时，我们出入变量i。\n由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。\n而在这个匿名函数内部，又创建了一个访问num的闭包，\n这样一来，result数组中的每个函数都有自己num变量的副本，\n因此就可以返回各自不同的数值了。\n\n##### 7.2.2关于this对象\n> this对象是在运行时基于函数的执行环境绑定的：   \n在全局函数中：thiis等于window；\n而在函数被当做某个对象的方法调用时：this等于那个对象。   \n不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；   \n在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。\n\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return function(){\n        return this.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"the window\"\n```\n为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？\n\n> 前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 `this` 和 `arguments`。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    var that = this;\n    return function(){\n        return that.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"my object\"\n```\n> tips: `this` 和 `arguments`也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。\n\n在几种特殊情况下，this的值可能会意外地改变\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return this.name\n  }\n};\n\nobject.getNameFunc();  //'my object'\n(object.getNameFunc)();  //'my object'\n(object.getNameFunc = object.getNameFunc)(); //'the window'\n```\n> 上述代码：第一种方式跟平常一样调用了`object.getNameFunc()`,返回`my object`,因为`this.name`就是`object.name`。   \n第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为`object.getNameFunc`和`object.getNameFunc`定义是相同的。    \n第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回`the window`。\n","source":"_posts/函数表达式.md","raw":"---\ntitle: 函数表达式\ndate: 2017-05-09 14:31:41\ntags: [javascript]\n---\n\n## 函数表达式\n\n1. 函数声明\n> 函数声明语法\n\n```javascript\nfunction funName(){\n    //函数体\n}\n```\nfunction是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。\n```javascript\nconsole.log(funName.name); //funName可以使用arguments.callee自调用\n\n```\n<!-- more -->\n> 重要的特性\n\n函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，\n意味着，**可以把函数声明放在调用它的语句后面**\n\n```javascript\nabc();  //\"1\"\nfunction abc(){\n    console.log('1');\n}\n```\n上述代码能够正常执行\n\n2. 函数表达式\n\n> 函数声明的几种形式\n- 最常见的一种形式\n```javascript\nvar funcName = function(){\n    //函数体\n}\n```\n\n创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为**匿名函数(anonymous function)**，因为function后面没有标识符。\n> 匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。\n\n函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。\n```javascript\nabc();\nvar abc = function(){\n    console.log(\"1\");\n}\n//报错：Uncaught TypeError: abc is not a function\n```\n\n理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：\n> 思考题\n```javascript\n//不要这么做\nif(isOk){\n    function sayHello(){\n        console.log('hello');\n    }\n}else{\n    function sayHello(){\n        console.log('world');\n    }\n}\n```\n结果是什么？\n> 从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义    \n实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。    \n但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，    \n因此使用这种方式很危险\n\n使用函数表达式就不会有这种问题\n```javascript\n//可以这样做\nvar sayHello;\nif(isOk){\n    sayHello = function(){\n        alert('hello');\n    }\n}else{\n    sayHello = function(){\n        alert('world!');\n    }\n}\n```\n能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。\n\n\n#### 7.1 递归\n> 递归函数是在一个函数通过名字调用自身的情况下构成的\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * count(num-1);\n    }\n}\n```\n> 上述代码是经典的阶乘函数    \n虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错\n\n```javascript\nvar anotherCount = count;\ncount = null;\nalert(anotherCount(4))  // 报错:count is not a function\n```\n>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。    \n但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错\"count is not a function\"\n\n> 在这种情况下，使用arguments.callee可以解决这个问题    \narguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * arguments.callee(num-1);\n    }\n}\n```\n\n通过使用`arguments.callee`代替函数名，可以确保无论怎么样调用函数都不会出问题，    \n因此，在编写函数递归调用时，使用`arguments.callee`总比使用函数名更保险。\n\n> 不过在严格模式下，\"严格模式\"（strict mode）不能通过脚本访问`arguments.callee`，访问这个属性将会报错。    \n不过可以使用命名函数表达式来达成相同的结果。\n\n```javascript\n'strict mode'   //严格模式\nvar count = (function f(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * f(num-1);\n    }\n});\n```\n>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量   \n函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。\n\n#### 7.2 闭包\n###### 概念\n> 闭包是指有权访问另一个函数作用域中的变量的函数\n创建闭包最常见的方式，就是在一个函数内部创建另一个函数。\n\n为什么还能够访问内部变量？\n>  是因为内部函数的作用域中包含父函数的作用域。\n\n###### 作用域链\n> 当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。   \n-->   \n然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。   \n-->   \n但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，...     \n直至作为作用域链终点的全局执行环境。   \n\n> 在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。\n```javascript\nfunction compare(value1, value2){\n    if(value1 < value2){\n        return -1;\n    } else if(value1 > value2){\n        return 1;\n    } else {\n        return 0;\n    }\n}\n```\n上述代码：\n1. 定义compare()函数\n2. 在全局作用域中调用它\n3. 当调用compare()时，会创建一个包含arguments,value1,value2的活动对象\n4. 全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。\n\n\ncompare()函数执行时的作用域链关系图\n\n![图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1489995952212&di=de4fccb3e1965772e5ac835604c69019&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg)\n\n后台每个执行环境都有一个表示变量的对象----**变量对象**。   \n**全局环境**的变量对象始终存在，而像`compare()`函数这样的**局部环境**的变量对象   \n则只在*函数执行*的过程中存在。\n\n- 在创建`compare()`函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的`[[Scope]]`属性中\n- 当调用`compare()`函数时，会为函数创建一个*执行环境*，然后通过复制函数的`[[Scope]]`属性中的对象构建起执行环境的作用域链接。\n- 此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端\n\n> 对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：\n1. 本地变量对象\n2. 全局变量对象\n> 作用域链*本质上*是一个指向*变量对象*的*指针列表*，它只包含**引用**但不实际包含**对象**。\n\n在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。   \n一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）   \n但是，***闭包***的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁\n\n> [注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。\n\n```javascript\n//创建函数\nvar compareNames = createComparisonFunction(\"name\");\n//调用函数\nvar result = compareNames({name:\"Nicholas\"},{name:\"Greg\"});\n//解除对匿名函数的引用(以便释放内存)\ncompareNames = null;\n/*首先，创建的比较函数被保存在变量compareNames中，\n而通过将compareNames设置为等于null，解除该函数的引用，\n就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，\n其他作用域(除了全局作用域)也都安全地销毁了。*/\n```\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n> 由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。   \n过度使用闭包可能会导致内存占用过多，   \nV8 javascript引擎会尝试回收被闭包占用的内存。\n\n##### 7.2.1 闭包和变量\n> 作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    \n\n闭包保存的是**整个变量对象**，而不是**某个特殊的值**。\n\n```javascript\nfunction createFunctions (){\n    var result = new Array();\n    \n    for (var i=0;i<10;i++){\n        result[i] = function(){\n            return i;\n        };\n    }\n    return result;\n}\n```\n这个函数会返回一个值。结果是每个函数都返回10.   \n因为每个函数的作用域中都保存着createFunctions()函数的活动对象，\n所以他们引用的都是同一个变量i。\n当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i\n的同一个变量对象，\n所以每个函数内部i的值都是10。\n\n![闭包](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png)\n```\nScopes[2]\nClosure (createFunctions)\ni:10\n```\n我们可以通过创建另一个匿名函数强制让闭包的行为符合预期\n\n```\nfunction createFunctions(){\n    var result = new Array();\n    \n    for(var i = 0;i < 10; i++){\n        result[i] = function(num){\n           return function(){\n               return num;\n           } \n        }(i)\n    }\n    return result;\n}\n```\n![closure-2](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png)\n\n改写后的createFunctions()函数，每个函数都会返回不同的索引值了。\n没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。\n这里的匿名函数有一个参数num，也就是最终要返回的值。\n在调用每个匿名函数时，我们出入变量i。\n由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。\n而在这个匿名函数内部，又创建了一个访问num的闭包，\n这样一来，result数组中的每个函数都有自己num变量的副本，\n因此就可以返回各自不同的数值了。\n\n##### 7.2.2关于this对象\n> this对象是在运行时基于函数的执行环境绑定的：   \n在全局函数中：thiis等于window；\n而在函数被当做某个对象的方法调用时：this等于那个对象。   \n不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；   \n在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。\n\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return function(){\n        return this.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"the window\"\n```\n为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？\n\n> 前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 `this` 和 `arguments`。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    var that = this;\n    return function(){\n        return that.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"my object\"\n```\n> tips: `this` 和 `arguments`也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。\n\n在几种特殊情况下，this的值可能会意外地改变\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return this.name\n  }\n};\n\nobject.getNameFunc();  //'my object'\n(object.getNameFunc)();  //'my object'\n(object.getNameFunc = object.getNameFunc)(); //'the window'\n```\n> 上述代码：第一种方式跟平常一样调用了`object.getNameFunc()`,返回`my object`,因为`this.name`就是`object.name`。   \n第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为`object.getNameFunc`和`object.getNameFunc`定义是相同的。    \n第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回`the window`。\n","slug":"函数表达式","published":1,"updated":"2017-08-15T06:25:55.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh820005lk90d344xj29","content":"<h2 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><ol>\n<li>函数声明<blockquote>\n<p>函数声明语法</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>function是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(funName.name); <span class=\"comment\">//funName可以使用arguments.callee自调用</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>重要的特性</p>\n</blockquote>\n<p>函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，<br>意味着，<strong>可以把函数声明放在调用它的语句后面</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();  <span class=\"comment\">//\"1\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码能够正常执行</p>\n<ol>\n<li>函数表达式</li>\n</ol>\n<blockquote>\n<p>函数声明的几种形式</p>\n<ul>\n<li>最常见的一种形式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为<strong>匿名函数(anonymous function)</strong>，因为function后面没有标识符。</p>\n<blockquote>\n<p>匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。</p>\n</blockquote>\n<p>函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();</div><div class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//报错：Uncaught TypeError: abc is not a function</span></div></pre></td></tr></table></figure></p>\n<p>理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：</p>\n<blockquote>\n<p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不要这么做</span></div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是什么？</p>\n<blockquote>\n<p>从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义<br>实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。<br>但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，<br>因此使用这种方式很危险</p>\n</blockquote>\n<p>使用函数表达式就不会有这种问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可以这样做</span></div><div class=\"line\"><span class=\"keyword\">var</span> sayHello;</div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'world!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。</p>\n<h4 id=\"7-1-递归\"><a href=\"#7-1-递归\" class=\"headerlink\" title=\"7.1 递归\"></a>7.1 递归</h4><blockquote>\n<p>递归函数是在一个函数通过名字调用自身的情况下构成的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * count(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上述代码是经典的阶乘函数<br>虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anotherCount = count;</div><div class=\"line\">count = <span class=\"literal\">null</span>;</div><div class=\"line\">alert(anotherCount(<span class=\"number\">4</span>))  <span class=\"comment\">// 报错:count is not a function</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。<br>但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错”count is not a function”</p>\n<p>在这种情况下，使用arguments.callee可以解决这个问题<br>arguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过使用<code>arguments.callee</code>代替函数名，可以确保无论怎么样调用函数都不会出问题，<br>因此，在编写函数递归调用时，使用<code>arguments.callee</code>总比使用函数名更保险。</p>\n<blockquote>\n<p>不过在严格模式下，”严格模式”（strict mode）不能通过脚本访问<code>arguments.callee</code>，访问这个属性将会报错。<br>不过可以使用命名函数表达式来达成相同的结果。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'strict mode'</span>   <span class=\"comment\">//严格模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> count = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * f(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量<br>函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。</p>\n</blockquote>\n<h4 id=\"7-2-闭包\"><a href=\"#7-2-闭包\" class=\"headerlink\" title=\"7.2 闭包\"></a>7.2 闭包</h4><h6 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h6><blockquote>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数<br>创建闭包最常见的方式，就是在一个函数内部创建另一个函数。</p>\n</blockquote>\n<p>为什么还能够访问内部变量？</p>\n<blockquote>\n<p> 是因为内部函数的作用域中包含父函数的作用域。</p>\n</blockquote>\n<h6 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h6><blockquote>\n<p>当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。<br>–&gt;<br>然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。<br>–&gt;<br>但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，…<br>直至作为作用域链终点的全局执行环境。   </p>\n<p>在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1, value2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(value1 &lt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>上述代码：</p>\n<ol>\n<li>定义compare()函数</li>\n<li>在全局作用域中调用它</li>\n<li>当调用compare()时，会创建一个包含arguments,value1,value2的活动对象</li>\n<li>全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。</li>\n</ol>\n<p>compare()函数执行时的作用域链关系图</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489995952212&amp;di=de4fccb3e1965772e5ac835604c69019&amp;imgtype=0&amp;src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg\" alt=\"图片\"></p>\n<p>后台每个执行环境都有一个表示变量的对象—-<strong>变量对象</strong>。<br><strong>全局环境</strong>的变量对象始终存在，而像<code>compare()</code>函数这样的<strong>局部环境</strong>的变量对象<br>则只在<em>函数执行</em>的过程中存在。</p>\n<ul>\n<li>在创建<code>compare()</code>函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的<code>[[Scope]]</code>属性中</li>\n<li>当调用<code>compare()</code>函数时，会为函数创建一个<em>执行环境</em>，然后通过复制函数的<code>[[Scope]]</code>属性中的对象构建起执行环境的作用域链接。</li>\n<li>此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端</li>\n</ul>\n<blockquote>\n<p>对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：</p>\n<ol>\n<li>本地变量对象</li>\n<li>全局变量对象<br>作用域链<em>本质上</em>是一个指向<em>变量对象</em>的<em>指针列表</em>，它只包含<strong>引用</strong>但不实际包含<strong>对象</strong>。</li>\n</ol>\n</blockquote>\n<p>在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。<br>一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）<br>但是，<strong><em>闭包</em></strong>的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁</p>\n<blockquote>\n<p>[注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> compareNames = createComparisonFunction(<span class=\"string\">\"name\"</span>);</div><div class=\"line\"><span class=\"comment\">//调用函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = compareNames(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nicholas\"</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Greg\"</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//解除对匿名函数的引用(以便释放内存)</span></div><div class=\"line\">compareNames = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"comment\">/*首先，创建的比较函数被保存在变量compareNames中，</span></div><div class=\"line\">而通过将compareNames设置为等于null，解除该函数的引用，</div><div class=\"line\">就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，</div><div class=\"line\">其他作用域(除了全局作用域)也都安全地销毁了。*/</div></pre></td></tr></table></figure>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<blockquote>\n<p>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。<br>过度使用闭包可能会导致内存占用过多，<br>V8 javascript引擎会尝试回收被闭包占用的内存。</p>\n</blockquote>\n<h5 id=\"7-2-1-闭包和变量\"><a href=\"#7-2-1-闭包和变量\" class=\"headerlink\" title=\"7.2.1 闭包和变量\"></a>7.2.1 闭包和变量</h5><blockquote>\n<p>作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    </p>\n</blockquote>\n<p>闭包保存的是<strong>整个变量对象</strong>，而不是<strong>某个特殊的值</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个函数会返回一个值。结果是每个函数都返回10.<br>因为每个函数的作用域中都保存着createFunctions()函数的活动对象，<br>所以他们引用的都是同一个变量i。<br>当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i<br>的同一个变量对象，<br>所以每个函数内部i的值都是10。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png\" alt=\"闭包\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scopes[2]</div><div class=\"line\">Closure (createFunctions)</div><div class=\"line\">i:10</div></pre></td></tr></table></figure></p>\n<p>我们可以通过创建另一个匿名函数强制让闭包的行为符合预期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\">    </div><div class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</div><div class=\"line\">        result[i] = function(num)&#123;</div><div class=\"line\">           return function()&#123;</div><div class=\"line\">               return num;</div><div class=\"line\">           &#125; </div><div class=\"line\">        &#125;(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png\" alt=\"closure-2\"></p>\n<p>改写后的createFunctions()函数，每个函数都会返回不同的索引值了。<br>没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。<br>这里的匿名函数有一个参数num，也就是最终要返回的值。<br>在调用每个匿名函数时，我们出入变量i。<br>由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。<br>而在这个匿名函数内部，又创建了一个访问num的闭包，<br>这样一来，result数组中的每个函数都有自己num变量的副本，<br>因此就可以返回各自不同的数值了。</p>\n<h5 id=\"7-2-2关于this对象\"><a href=\"#7-2-2关于this对象\" class=\"headerlink\" title=\"7.2.2关于this对象\"></a>7.2.2关于this对象</h5><blockquote>\n<p>this对象是在运行时基于函数的执行环境绑定的：<br>在全局函数中：thiis等于window；<br>而在函数被当做某个对象的方法调用时：this等于那个对象。<br>不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；<br>在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return this.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;the window&quot;</div></pre></td></tr></table></figure>\n<p>为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？</p>\n<blockquote>\n<p>前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 <code>this</code> 和 <code>arguments</code>。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。</p>\n</blockquote>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<p>不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return that.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;my object&quot;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>tips: <code>this</code> 和 <code>arguments</code>也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。</p>\n</blockquote>\n<p>在几种特殊情况下，this的值可能会意外地改变<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc)();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc = object.getNameFunc)(); //&apos;the window&apos;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上述代码：第一种方式跟平常一样调用了<code>object.getNameFunc()</code>,返回<code>my object</code>,因为<code>this.name</code>就是<code>object.name</code>。<br>第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为<code>object.getNameFunc</code>和<code>object.getNameFunc</code>定义是相同的。<br>第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回<code>the window</code>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><ol>\n<li>函数声明<blockquote>\n<p>函数声明语法</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>function是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(funName.name); <span class=\"comment\">//funName可以使用arguments.callee自调用</span></div></pre></td></tr></table></figure></p>","more":"<blockquote>\n<p>重要的特性</p>\n</blockquote>\n<p>函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，<br>意味着，<strong>可以把函数声明放在调用它的语句后面</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();  <span class=\"comment\">//\"1\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码能够正常执行</p>\n<ol>\n<li>函数表达式</li>\n</ol>\n<blockquote>\n<p>函数声明的几种形式</p>\n<ul>\n<li>最常见的一种形式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为<strong>匿名函数(anonymous function)</strong>，因为function后面没有标识符。</p>\n<blockquote>\n<p>匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。</p>\n</blockquote>\n<p>函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();</div><div class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//报错：Uncaught TypeError: abc is not a function</span></div></pre></td></tr></table></figure></p>\n<p>理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：</p>\n<blockquote>\n<p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不要这么做</span></div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是什么？</p>\n<blockquote>\n<p>从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义<br>实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。<br>但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，<br>因此使用这种方式很危险</p>\n</blockquote>\n<p>使用函数表达式就不会有这种问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可以这样做</span></div><div class=\"line\"><span class=\"keyword\">var</span> sayHello;</div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'world!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。</p>\n<h4 id=\"7-1-递归\"><a href=\"#7-1-递归\" class=\"headerlink\" title=\"7.1 递归\"></a>7.1 递归</h4><blockquote>\n<p>递归函数是在一个函数通过名字调用自身的情况下构成的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * count(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上述代码是经典的阶乘函数<br>虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anotherCount = count;</div><div class=\"line\">count = <span class=\"literal\">null</span>;</div><div class=\"line\">alert(anotherCount(<span class=\"number\">4</span>))  <span class=\"comment\">// 报错:count is not a function</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。<br>但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错”count is not a function”</p>\n<p>在这种情况下，使用arguments.callee可以解决这个问题<br>arguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过使用<code>arguments.callee</code>代替函数名，可以确保无论怎么样调用函数都不会出问题，<br>因此，在编写函数递归调用时，使用<code>arguments.callee</code>总比使用函数名更保险。</p>\n<blockquote>\n<p>不过在严格模式下，”严格模式”（strict mode）不能通过脚本访问<code>arguments.callee</code>，访问这个属性将会报错。<br>不过可以使用命名函数表达式来达成相同的结果。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'strict mode'</span>   <span class=\"comment\">//严格模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> count = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * f(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量<br>函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。</p>\n</blockquote>\n<h4 id=\"7-2-闭包\"><a href=\"#7-2-闭包\" class=\"headerlink\" title=\"7.2 闭包\"></a>7.2 闭包</h4><h6 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h6><blockquote>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数<br>创建闭包最常见的方式，就是在一个函数内部创建另一个函数。</p>\n</blockquote>\n<p>为什么还能够访问内部变量？</p>\n<blockquote>\n<p> 是因为内部函数的作用域中包含父函数的作用域。</p>\n</blockquote>\n<h6 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h6><blockquote>\n<p>当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。<br>–&gt;<br>然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。<br>–&gt;<br>但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，…<br>直至作为作用域链终点的全局执行环境。   </p>\n<p>在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1, value2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(value1 &lt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>上述代码：</p>\n<ol>\n<li>定义compare()函数</li>\n<li>在全局作用域中调用它</li>\n<li>当调用compare()时，会创建一个包含arguments,value1,value2的活动对象</li>\n<li>全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。</li>\n</ol>\n<p>compare()函数执行时的作用域链关系图</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489995952212&amp;di=de4fccb3e1965772e5ac835604c69019&amp;imgtype=0&amp;src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg\" alt=\"图片\"></p>\n<p>后台每个执行环境都有一个表示变量的对象—-<strong>变量对象</strong>。<br><strong>全局环境</strong>的变量对象始终存在，而像<code>compare()</code>函数这样的<strong>局部环境</strong>的变量对象<br>则只在<em>函数执行</em>的过程中存在。</p>\n<ul>\n<li>在创建<code>compare()</code>函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的<code>[[Scope]]</code>属性中</li>\n<li>当调用<code>compare()</code>函数时，会为函数创建一个<em>执行环境</em>，然后通过复制函数的<code>[[Scope]]</code>属性中的对象构建起执行环境的作用域链接。</li>\n<li>此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端</li>\n</ul>\n<blockquote>\n<p>对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：</p>\n<ol>\n<li>本地变量对象</li>\n<li>全局变量对象<br>作用域链<em>本质上</em>是一个指向<em>变量对象</em>的<em>指针列表</em>，它只包含<strong>引用</strong>但不实际包含<strong>对象</strong>。</li>\n</ol>\n</blockquote>\n<p>在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。<br>一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）<br>但是，<strong><em>闭包</em></strong>的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁</p>\n<blockquote>\n<p>[注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> compareNames = createComparisonFunction(<span class=\"string\">\"name\"</span>);</div><div class=\"line\"><span class=\"comment\">//调用函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = compareNames(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nicholas\"</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Greg\"</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//解除对匿名函数的引用(以便释放内存)</span></div><div class=\"line\">compareNames = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"comment\">/*首先，创建的比较函数被保存在变量compareNames中，</span></div><div class=\"line\">而通过将compareNames设置为等于null，解除该函数的引用，</div><div class=\"line\">就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，</div><div class=\"line\">其他作用域(除了全局作用域)也都安全地销毁了。*/</div></pre></td></tr></table></figure>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<blockquote>\n<p>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。<br>过度使用闭包可能会导致内存占用过多，<br>V8 javascript引擎会尝试回收被闭包占用的内存。</p>\n</blockquote>\n<h5 id=\"7-2-1-闭包和变量\"><a href=\"#7-2-1-闭包和变量\" class=\"headerlink\" title=\"7.2.1 闭包和变量\"></a>7.2.1 闭包和变量</h5><blockquote>\n<p>作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    </p>\n</blockquote>\n<p>闭包保存的是<strong>整个变量对象</strong>，而不是<strong>某个特殊的值</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个函数会返回一个值。结果是每个函数都返回10.<br>因为每个函数的作用域中都保存着createFunctions()函数的活动对象，<br>所以他们引用的都是同一个变量i。<br>当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i<br>的同一个变量对象，<br>所以每个函数内部i的值都是10。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png\" alt=\"闭包\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scopes[2]</div><div class=\"line\">Closure (createFunctions)</div><div class=\"line\">i:10</div></pre></td></tr></table></figure></p>\n<p>我们可以通过创建另一个匿名函数强制让闭包的行为符合预期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\">    </div><div class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</div><div class=\"line\">        result[i] = function(num)&#123;</div><div class=\"line\">           return function()&#123;</div><div class=\"line\">               return num;</div><div class=\"line\">           &#125; </div><div class=\"line\">        &#125;(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png\" alt=\"closure-2\"></p>\n<p>改写后的createFunctions()函数，每个函数都会返回不同的索引值了。<br>没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。<br>这里的匿名函数有一个参数num，也就是最终要返回的值。<br>在调用每个匿名函数时，我们出入变量i。<br>由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。<br>而在这个匿名函数内部，又创建了一个访问num的闭包，<br>这样一来，result数组中的每个函数都有自己num变量的副本，<br>因此就可以返回各自不同的数值了。</p>\n<h5 id=\"7-2-2关于this对象\"><a href=\"#7-2-2关于this对象\" class=\"headerlink\" title=\"7.2.2关于this对象\"></a>7.2.2关于this对象</h5><blockquote>\n<p>this对象是在运行时基于函数的执行环境绑定的：<br>在全局函数中：thiis等于window；<br>而在函数被当做某个对象的方法调用时：this等于那个对象。<br>不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；<br>在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return this.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;the window&quot;</div></pre></td></tr></table></figure>\n<p>为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？</p>\n<blockquote>\n<p>前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 <code>this</code> 和 <code>arguments</code>。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。</p>\n</blockquote>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<p>不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return that.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;my object&quot;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>tips: <code>this</code> 和 <code>arguments</code>也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。</p>\n</blockquote>\n<p>在几种特殊情况下，this的值可能会意外地改变<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc)();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc = object.getNameFunc)(); //&apos;the window&apos;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上述代码：第一种方式跟平常一样调用了<code>object.getNameFunc()</code>,返回<code>my object</code>,因为<code>this.name</code>就是<code>object.name</code>。<br>第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为<code>object.getNameFunc</code>和<code>object.getNameFunc</code>定义是相同的。<br>第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回<code>the window</code>。</p>\n</blockquote>"},{"title":"终于成功了","date":"2017-05-08T14:28:28.000Z","_content":"终于成功了，搞了老子一天了，\n让我激动一会儿~~","source":"_posts/终于成功了.md","raw":"---\ntitle: 终于成功了\ndate: 2017-05-08 22:28:28\ntags:\n---\n终于成功了，搞了老子一天了，\n让我激动一会儿~~","slug":"终于成功了","published":1,"updated":"2017-05-09T07:45:53.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh840006lk90co5byqsa","content":"<p>终于成功了，搞了老子一天了，<br>让我激动一会儿~~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于成功了，搞了老子一天了，<br>让我激动一会儿~~</p>\n"},{"title":"Location-Object","date":"2017-05-09T07:49:34.000Z","_content":"\n- 它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。\n- `location`对象很特别，它既是`window`对象的属性，又是`document`对象的属性。\n```\nwindow.location === document.location  //true\n```\n- location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。\n\n<!-- more -->\n\n> 属性\n\n属性名 | 例子 | 说明\n---|--- | ---\nhash | \"#contents\" | 返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串\nhost | \"www.qxy.com:80\" | 返回服务器名称和端口号（如果有）\nhostname | \"www.qxy.com\" | 返回不带端口号的服务器名称\nhref | \"http://www.qxy.com\" | 返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值\npathname | \"/blog/\" | 返回URL中的目录和（或）文件名\nport | \"8080\" | 返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串\nprotocol | \"http:\" | 返回页面使用的协议。通常是http:或https:\nsearch | \"?q=javascript\" | 返回URL的查询字符串。这个字符串以问号开头\n\n#### 查询字符串参数\n\n虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符\n串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个\n访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返\n回包含所有参数的一个对象：\n```\nfunction getQueryStringArgs(){\n    //取得查询字符串并去掉开头的问号\n    var qs = (location.search.length > 0 ? location.search.substring(1) : \"\" ),\n        //保存数据的对象\n        args = {},\n        //取得每一项\n        items = qs.length ? qs.split('&') : [],\n        item = null,\n        name = null,\n        value = null,\n        //在for循环中使用\n        i = 0,\n        len = items.length;\n        \n    //逐个将每一项添加到args对象中\n    \n    for(i = 0;i < len; i++){\n        item = items[i].split(':');\n        name = decodeURIComponent(item[0]);\n        value = decodeURIComponent(item[1]);\n        \n        if(name.length){\n            args[name] = value;\n        }\n    }\n    return args;\n}\n```\n\n#### 位置操作\n\n使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用\nassign()方法并为其传递一个URL，如下所示。\n```\nlocation.assign(\"http://www.qxy.com\");\n```\n\n这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将`location.href`\n或`window.location` 设置为一个URL 值，也会以该值调用`assign()`方法。例如，下列两行代码与\n显式调用`assign()`方法的效果完全一样。\n```\nwindow.location = \"http://www.wrox.com\";\nlocation.href = \"http://www.wrox.com\";\n```\n在这些改变浏览器位置的方法中，最常用的是设置`location.href `属性。\n\n修改location 对象的其他属性也可以改变当前加载的页面\n```\n//假设初始URL 为http://www.wrox.com/WileyCDA/\n//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"\nlocation.hash = \"#section1\";\n//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"\nlocation.search = \"?q=javascript\";\n//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"\nlocation.hostname = \"www.yahoo.com\";\n//将URL 修改为\"http://www.yahoo.com/mydir/\"\nlocation.pathname = \"mydir\";\n//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"\nlocation.port = 8080;\n```\n每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。\n> 在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览\n器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后\n退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。\n\n> replace()方法。这个方法\n只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记\n录。在调用replace()方法之后，用户不能回到前一个页面\n```\nsetTimeout(function () {\nlocation.replace(\"http://www.wrox.com/\");\n}, 1000);\n```\n\n> reload()，作用是重新加载当前显示的页面\n\n如果调用reload()\n时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改\n变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法\n传递参数true。\n```\nlocation.reload(); //重新加载（有可能从缓存中加载）\nlocation.reload(true); //重新加载（从服务器重新加载）\n```\n位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。\n为此，最好将reload()放在代码的最后一行。","source":"_posts/Location-Object.md","raw":"---\ntitle: Location-Object\ndate: 2017-05-09 15:49:34\ntags: [javascript, object, location]\n---\n\n- 它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。\n- `location`对象很特别，它既是`window`对象的属性，又是`document`对象的属性。\n```\nwindow.location === document.location  //true\n```\n- location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。\n\n<!-- more -->\n\n> 属性\n\n属性名 | 例子 | 说明\n---|--- | ---\nhash | \"#contents\" | 返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串\nhost | \"www.qxy.com:80\" | 返回服务器名称和端口号（如果有）\nhostname | \"www.qxy.com\" | 返回不带端口号的服务器名称\nhref | \"http://www.qxy.com\" | 返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值\npathname | \"/blog/\" | 返回URL中的目录和（或）文件名\nport | \"8080\" | 返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串\nprotocol | \"http:\" | 返回页面使用的协议。通常是http:或https:\nsearch | \"?q=javascript\" | 返回URL的查询字符串。这个字符串以问号开头\n\n#### 查询字符串参数\n\n虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符\n串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个\n访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返\n回包含所有参数的一个对象：\n```\nfunction getQueryStringArgs(){\n    //取得查询字符串并去掉开头的问号\n    var qs = (location.search.length > 0 ? location.search.substring(1) : \"\" ),\n        //保存数据的对象\n        args = {},\n        //取得每一项\n        items = qs.length ? qs.split('&') : [],\n        item = null,\n        name = null,\n        value = null,\n        //在for循环中使用\n        i = 0,\n        len = items.length;\n        \n    //逐个将每一项添加到args对象中\n    \n    for(i = 0;i < len; i++){\n        item = items[i].split(':');\n        name = decodeURIComponent(item[0]);\n        value = decodeURIComponent(item[1]);\n        \n        if(name.length){\n            args[name] = value;\n        }\n    }\n    return args;\n}\n```\n\n#### 位置操作\n\n使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用\nassign()方法并为其传递一个URL，如下所示。\n```\nlocation.assign(\"http://www.qxy.com\");\n```\n\n这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将`location.href`\n或`window.location` 设置为一个URL 值，也会以该值调用`assign()`方法。例如，下列两行代码与\n显式调用`assign()`方法的效果完全一样。\n```\nwindow.location = \"http://www.wrox.com\";\nlocation.href = \"http://www.wrox.com\";\n```\n在这些改变浏览器位置的方法中，最常用的是设置`location.href `属性。\n\n修改location 对象的其他属性也可以改变当前加载的页面\n```\n//假设初始URL 为http://www.wrox.com/WileyCDA/\n//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"\nlocation.hash = \"#section1\";\n//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"\nlocation.search = \"?q=javascript\";\n//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"\nlocation.hostname = \"www.yahoo.com\";\n//将URL 修改为\"http://www.yahoo.com/mydir/\"\nlocation.pathname = \"mydir\";\n//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"\nlocation.port = 8080;\n```\n每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。\n> 在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览\n器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后\n退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。\n\n> replace()方法。这个方法\n只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记\n录。在调用replace()方法之后，用户不能回到前一个页面\n```\nsetTimeout(function () {\nlocation.replace(\"http://www.wrox.com/\");\n}, 1000);\n```\n\n> reload()，作用是重新加载当前显示的页面\n\n如果调用reload()\n时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改\n变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法\n传递参数true。\n```\nlocation.reload(); //重新加载（有可能从缓存中加载）\nlocation.reload(true); //重新加载（从服务器重新加载）\n```\n位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。\n为此，最好将reload()放在代码的最后一行。","slug":"Location-Object","published":1,"updated":"2017-08-15T06:26:59.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh870008lk904vudayev","content":"<ul>\n<li>它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。</li>\n<li><p><code>location</code>对象很特别，它既是<code>window</code>对象的属性，又是<code>document</code>对象的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location === document.location  //true</div></pre></td></tr></table></figure>\n</li>\n<li><p>location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>“#contents”</td>\n<td>返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串</td>\n</tr>\n<tr>\n<td>host</td>\n<td>“www.qxy.com:80”</td>\n<td>返回服务器名称和端口号（如果有）</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>“www.qxy.com”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td>“<a href=\"http://www.qxy.com\" target=\"_blank\" rel=\"external\">http://www.qxy.com</a>“</td>\n<td>返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>“/blog/“</td>\n<td>返回URL中的目录和（或）文件名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>“8080”</td>\n<td>返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>“http:”</td>\n<td>返回页面使用的协议。通常是http:或https:</td>\n</tr>\n<tr>\n<td>search</td>\n<td>“?q=javascript”</td>\n<td>返回URL的查询字符串。这个字符串以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h4><p>虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符<br>串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个<br>访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返<br>回包含所有参数的一个对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getQueryStringArgs()&#123;</div><div class=\"line\">    //取得查询字符串并去掉开头的问号</div><div class=\"line\">    var qs = (location.search.length &gt; 0 ? location.search.substring(1) : &quot;&quot; ),</div><div class=\"line\">        //保存数据的对象</div><div class=\"line\">        args = &#123;&#125;,</div><div class=\"line\">        //取得每一项</div><div class=\"line\">        items = qs.length ? qs.split(&apos;&amp;&apos;) : [],</div><div class=\"line\">        item = null,</div><div class=\"line\">        name = null,</div><div class=\"line\">        value = null,</div><div class=\"line\">        //在for循环中使用</div><div class=\"line\">        i = 0,</div><div class=\"line\">        len = items.length;</div><div class=\"line\">        </div><div class=\"line\">    //逐个将每一项添加到args对象中</div><div class=\"line\">    </div><div class=\"line\">    for(i = 0;i &lt; len; i++)&#123;</div><div class=\"line\">        item = items[i].split(&apos;:&apos;);</div><div class=\"line\">        name = decodeURIComponent(item[0]);</div><div class=\"line\">        value = decodeURIComponent(item[1]);</div><div class=\"line\">        </div><div class=\"line\">        if(name.length)&#123;</div><div class=\"line\">            args[name] = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return args;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h4><p>使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用<br>assign()方法并为其传递一个URL，如下所示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.assign(&quot;http://www.qxy.com&quot;);</div></pre></td></tr></table></figure></p>\n<p>这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将<code>location.href</code><br>或<code>window.location</code> 设置为一个URL 值，也会以该值调用<code>assign()</code>方法。例如，下列两行代码与<br>显式调用<code>assign()</code>方法的效果完全一样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location = &quot;http://www.wrox.com&quot;;</div><div class=\"line\">location.href = &quot;http://www.wrox.com&quot;;</div></pre></td></tr></table></figure></p>\n<p>在这些改变浏览器位置的方法中，最常用的是设置<code>location.href</code>属性。</p>\n<p>修改location 对象的其他属性也可以改变当前加载的页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//假设初始URL 为http://www.wrox.com/WileyCDA/</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/#section1&quot;</div><div class=\"line\">location.hash = &quot;#section1&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/?q=javascript&quot;</div><div class=\"line\">location.search = &quot;?q=javascript&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/WileyCDA/&quot;</div><div class=\"line\">location.hostname = &quot;www.yahoo.com&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/mydir/&quot;</div><div class=\"line\">location.pathname = &quot;mydir&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com:8080/WileyCDA/&quot;</div><div class=\"line\">location.port = 8080;</div></pre></td></tr></table></figure></p>\n<p>每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。</p>\n<blockquote>\n<p>在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览<br>器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后<br>退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。</p>\n<p>replace()方法。这个方法<br>只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记<br>录。在调用replace()方法之后，用户不能回到前一个页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">location.replace(&quot;http://www.wrox.com/&quot;);</div><div class=\"line\">&#125;, 1000);</div></pre></td></tr></table></figure></p>\n<p>reload()，作用是重新加载当前显示的页面</p>\n</blockquote>\n<p>如果调用reload()<br>时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改<br>变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法<br>传递参数true。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.reload(); //重新加载（有可能从缓存中加载）</div><div class=\"line\">location.reload(true); //重新加载（从服务器重新加载）</div></pre></td></tr></table></figure></p>\n<p>位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。<br>为此，最好将reload()放在代码的最后一行。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。</li>\n<li><p><code>location</code>对象很特别，它既是<code>window</code>对象的属性，又是<code>document</code>对象的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location === document.location  //true</div></pre></td></tr></table></figure>\n</li>\n<li><p>location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。</p>\n</li>\n</ul>","more":"<blockquote>\n<p>属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>“#contents”</td>\n<td>返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串</td>\n</tr>\n<tr>\n<td>host</td>\n<td>“www.qxy.com:80”</td>\n<td>返回服务器名称和端口号（如果有）</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>“www.qxy.com”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td>“<a href=\"http://www.qxy.com\" target=\"_blank\" rel=\"external\">http://www.qxy.com</a>“</td>\n<td>返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>“/blog/“</td>\n<td>返回URL中的目录和（或）文件名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>“8080”</td>\n<td>返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>“http:”</td>\n<td>返回页面使用的协议。通常是http:或https:</td>\n</tr>\n<tr>\n<td>search</td>\n<td>“?q=javascript”</td>\n<td>返回URL的查询字符串。这个字符串以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h4><p>虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符<br>串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个<br>访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返<br>回包含所有参数的一个对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getQueryStringArgs()&#123;</div><div class=\"line\">    //取得查询字符串并去掉开头的问号</div><div class=\"line\">    var qs = (location.search.length &gt; 0 ? location.search.substring(1) : &quot;&quot; ),</div><div class=\"line\">        //保存数据的对象</div><div class=\"line\">        args = &#123;&#125;,</div><div class=\"line\">        //取得每一项</div><div class=\"line\">        items = qs.length ? qs.split(&apos;&amp;&apos;) : [],</div><div class=\"line\">        item = null,</div><div class=\"line\">        name = null,</div><div class=\"line\">        value = null,</div><div class=\"line\">        //在for循环中使用</div><div class=\"line\">        i = 0,</div><div class=\"line\">        len = items.length;</div><div class=\"line\">        </div><div class=\"line\">    //逐个将每一项添加到args对象中</div><div class=\"line\">    </div><div class=\"line\">    for(i = 0;i &lt; len; i++)&#123;</div><div class=\"line\">        item = items[i].split(&apos;:&apos;);</div><div class=\"line\">        name = decodeURIComponent(item[0]);</div><div class=\"line\">        value = decodeURIComponent(item[1]);</div><div class=\"line\">        </div><div class=\"line\">        if(name.length)&#123;</div><div class=\"line\">            args[name] = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return args;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h4><p>使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用<br>assign()方法并为其传递一个URL，如下所示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.assign(&quot;http://www.qxy.com&quot;);</div></pre></td></tr></table></figure></p>\n<p>这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将<code>location.href</code><br>或<code>window.location</code> 设置为一个URL 值，也会以该值调用<code>assign()</code>方法。例如，下列两行代码与<br>显式调用<code>assign()</code>方法的效果完全一样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location = &quot;http://www.wrox.com&quot;;</div><div class=\"line\">location.href = &quot;http://www.wrox.com&quot;;</div></pre></td></tr></table></figure></p>\n<p>在这些改变浏览器位置的方法中，最常用的是设置<code>location.href</code>属性。</p>\n<p>修改location 对象的其他属性也可以改变当前加载的页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//假设初始URL 为http://www.wrox.com/WileyCDA/</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/#section1&quot;</div><div class=\"line\">location.hash = &quot;#section1&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/?q=javascript&quot;</div><div class=\"line\">location.search = &quot;?q=javascript&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/WileyCDA/&quot;</div><div class=\"line\">location.hostname = &quot;www.yahoo.com&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/mydir/&quot;</div><div class=\"line\">location.pathname = &quot;mydir&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com:8080/WileyCDA/&quot;</div><div class=\"line\">location.port = 8080;</div></pre></td></tr></table></figure></p>\n<p>每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。</p>\n<blockquote>\n<p>在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览<br>器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后<br>退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。</p>\n<p>replace()方法。这个方法<br>只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记<br>录。在调用replace()方法之后，用户不能回到前一个页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">location.replace(&quot;http://www.wrox.com/&quot;);</div><div class=\"line\">&#125;, 1000);</div></pre></td></tr></table></figure></p>\n<p>reload()，作用是重新加载当前显示的页面</p>\n</blockquote>\n<p>如果调用reload()<br>时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改<br>变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法<br>传递参数true。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.reload(); //重新加载（有可能从缓存中加载）</div><div class=\"line\">location.reload(true); //重新加载（从服务器重新加载）</div></pre></td></tr></table></figure></p>\n<p>位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。<br>为此，最好将reload()放在代码的最后一行。</p>"},{"title":"《看漫画，学Redux》[转载]","date":"2017-06-07T02:00:41.000Z","_content":"\n# 《看漫画，学 Redux》 —— A cartoon intro to Redux\n\n> 不写一行代码，轻松看懂 Redux 原理。 [原文](https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6)\n>\n> 如果你有任何疑惑，不妨在 [Issues](https://github.com/jasonslyvia/a-cartoon-intro-to-redux-cn/issues) 中提出。\n\nFlux 架构已然让人觉得有些迷惑，而比 Flux 更让人摸不着头脑的是 Flux 与 Redux 的区别。Redux 是一个基于 Flux 思想的新架构方式，本文将探讨它们的区别。\n\n如果你还没有看过[这篇关于 Flux 的文章](https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207)（译者注：也可以参考[这篇](https://www.zhihu.com/question/33864532/answer/57657275)），你应该先阅读一下。\n\n<!-- more -->\n\n## 为什么要改变 Flux？\n\nRedux 解决的问题和 Flux 一样，但 Redux 能做的还有更多。\n\n和 Flux 一样，Redux 让应用的状态变化变得更加可预测。如果你想改变应用的状态，就必须 dispatch 一个 action。你没有办法直接改变应用的状态，因为保存这些状态的东西（称为 store）只有 getter 而没有 setter。对于 Flux 和 Redux 来说，这些概念都是相似的。\n\n那么为什么要新设计一种架构呢？Redux 的创造者 Dan Abramov 发现了改进 Flux 架构的可能。他想要一个更好的开发者工具来调试 Flux 应用。他发现如果稍微对 Flux 架构进行一些调整，就可以开发出一款更好用的开发者工具，同时依然能享受 Flux 架构带给你的可预测性。\n\n确切的说，他想要的开发者工具包含了代码热替换（hot reload）和时间旅行（time travel）功能。然而要想在 Flux 架构上实现这些功能，确实有些麻烦。\n\n### 问题1：store 的代码无法被热替换，除非清空当前的状态\n\n在 Flux 中，store 包含了两样东西：\n\n 1. 改变状态的逻辑\n 2. 当前的状态\n\n在一个 store 中同时保存这两样东西将会导致代码热替换功能出现问题。当你热替换掉 store 的代码想要看看新的状态改变逻辑是否生效时，你就丢失了 store 中保存的当前状态。此外，你还把 store 与 Flux 架构中其它组件产生关系的事件系统搞乱了。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*L66K9uCQjjHmpAwT-a9C5Q.png)\n\n**解决方案**\n\n将这两样东西分开处理。让一个对象来保存状态，这个对象在热替换代码的时候不会受到影响。让另一个对象包含所有改变状态的逻辑，这个对象可以被热替换因为它不用关心任何保存状态相关的事情。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*nBsGCWmJTR-Zj7aXeIE8yg.png)\n\n### 问题2：每次触发 action 时状态对象都被直接改写了\n\n时间旅行调试法的特性是：你能掌握状态对象的每一次变化，这样的话，你就能轻松的跳回到这个对象之前的某个状态（想象一个撤销功能）。\n\n要实现这样的功能，每次状态改变之后，你都需要把旧的状态保存在一个数组中。但是由于 JavaScript 的对象引用特性，简单的把一个对象放进数组中并不能实现我们需要的功能。这样做不能创建一个快照（snapshot），而只是创建了一个新的指针指向同一个对象。\n\n所以要想实现时间旅行特性，每一个状态改变的版本都需要保存在不同的 JavaScript 对象中，这样你才不会不小心改变了某个历史版本的状态。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*4zODv5vgvKsi6Ts7TihsoA.png)\n\n**解决方案**\n\n当一个 action 需要 store 响应时，不要直接修改 store 中的状态，而是将状态拷贝一份并在这份拷贝的状态上做出修改。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*wLRhZ0wtI0duLsigdxL1CA.png)\n\n###问题3：没有合适的位置引入第三方插件\n\n当你在写一些调试性工具时，你希望它们能够更加通用。一个使用该工具的用户应该可以直接引入这个工具而不需要做额外的包装或桥接。\n\n要实现这样的特性，Flux 架构需要一个扩展点。\n\n一个简单的例子就是日志。比如说你希望 console.log() 每一个触发的 action 同时 console.log() 这个 action 被响应完成后的状态。在 Flux 中，你只能订阅（subscribe） dispatcher 的更新和每一个 store 的变动。但是这样就侵入了业务代码，这样的日志功能不是一个第三方插件能够轻易实现的。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*MG736zGtLMBbSkhwu4D3cA.png)\n\n**解决方案**\n\n将这个架构的部分功能包装进其他的对象中将使得我们的需求变得更容易实现。这些「其他对象」在架构原有的功能基础之上添加了自己的功能。你可以把这种扩展点看做是一个增强器（enhancers）或者高阶对象（higher order objects），亦或者中间件（middleware）。\n\n此外，使用一个树形结构来组织所有改变状态的逻辑，这样当状态发生改变的时候 store 只会触发一个事件来通知视图层（view），而这一个事件会被整棵树中的所有逻辑处理（译者注：「处理」不代表一定会改变状态，这些改变状态的逻辑本质上是函数，函数内部会根据 action 的类型等来确定是否对状态进行改变）。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*5JaZSc3Jsn9PJY7daEDVDA.png)\n\n*注意：就上述这些问题和解决方案来说，我主要在关注开发者工具这一使用场景。实际上，对 Flux 做出的这些改变在其他场景中也非常有帮助。在上述三点之外，Flux 和 Redux 还有更多的不同点。比如，相比于 Flux，Redux 精简了整个架构的冗余代码，并且复用 store 的逻辑变得更加简单。这里有一个 [Redux 优点的列表](http://stackoverflow.com/a/32920459)可供参考。\n\n那么让我们来看看 Redux 是怎么让这些特性变为现实的。\n\n## 新的角色\n\n从 Flux 演进到 Redux，整个架构中的角色发生了些许的变化。\n\n### Action creators\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*Uljrrh4Z7UiUwk8AjUO9PA.png)\n\nRedux 保留了 Flux 中 action creator 的概念。每当你想要改变应用中的状态时，你就要 dispatch 一个 action，这也是唯一改变状态的方法。\n\n就像我在[这篇关于 Flux 的文章](https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207)中提到的一样，我把 action creator 看做是一个报务员（负责发电报的人，telegraph operator），你找到 action creator 告诉他你大致上想要传达什么信息，action creator 则会把这些信息格式化为一种标准的格式，以便系统中的其他部分能够理解。\n\n与 Flux 不同的是，Redux 中的 action creator 不会直接把 action 发送给 dispatcher，而是返回一个格式化好的 JavaScript 对象。\n\n### The store\n\n我把 Flux 中 store 的那一套机制描述为一种控制过度的官僚体系。你不能简单直接的修改状态，而是要求所有的状态改变都必须由 store 亲自产生，还必须要经历 action 分发那种套路。在 Redux 中，store 依然是这么的充满控制欲和官僚主义，但是又有些不一样。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*Gztc7THzxzOgJmGvJ95IQA.png)\n\n在 Flux 中，你可以拥有多个 store，每一个 store 都有自己的统治权。每个 store 都保存着自己对应的那部分状态，以及所有修改这些状态的逻辑。\n\n而 Redux 中的 store 更喜欢将权力下放，事实上不得不这么做。因为在 Redux 中，你只能有一个 store……所以如果你打算像 Flux 那样让 store 完全独立处理自己的事情，那么在 Redux 中，store 里的工作量将变得非常大。\n\n因此，Redux 中的 store 首先会保存整个应用的所有状态，然后将「判断哪一部分状态需要改变」的任务分配下去。而以根 reducer（root reducer）为首的 reducer 们将会承担这个任务。\n\n你可能发现这里好像没有 dispatcher 什么事。是的，虽然看起来有点儿越权，但 Redux 里的 store 已经完全接管了 dispatcher 相关的工作。\n\n### The reducers\n\n当 store 需要知道一个 action 触发后状态需要怎么改变时，他会去询问 reducer。根 reducer 会根据状态对象的键（key）将整个状态树进行拆分，然后将拆分后的每一块子状态传到知道该怎么对这块状态进行响应的子 reducer 那里处理。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*Vocy_6Gl9PbFlCIJsE9r3A.png)\n\n我把 reducers 看做是对复印情有独钟的白领们。他们不希望把任何事搞砸，因此他们不会修改任何传递给他们的文件。取而代之的是，他们会对这些文件进行复印，然后在复印件上进行修改。（译者注：当然，当这些修改后的复印件定稿后，他们也不会再去修改这些复印件。）\n\n这是 Redux 的核心思想之一。不直接修改整个应用的状态树，而是将状态树的每一部分进行拷贝并修改拷贝后的部分，然后将这些部分重新组合成一颗新的状态树。\n\n子 reducers 会把他们创建的副本传回给根 reducer，而根 reducer 会把这些副本组合起来形成一颗新的状态树。最后根 reducer 将新的状态树传回给 store，store 再将新的状态树设为最终的状态。\n\n如果你有一个小型应用，你可能只有一个 reducer 对整个状态树进行拷贝并作出修改。又或者你有一个超大的应用，你可能会有若干个 reducers 对整个状态树进行修改。这也是 Flux 和 Redux 的另一处区别。在 Flux 中，store 并不需要与其他 store 产生关联，而且 store 的结构是扁平的。而在 Redux 中，reducers 是有层级结构的。这种层级结构可以有若干层，就像组件的层级结构那样。\n\n### The views: 智能组件（smart components）和木偶组件(dumb components)\n\nFlux 拥有控制型视图（controller views） 和常规型视图（regular views）。控制型视图就像是一个经理一样，管理着 store 和子视图（child views）之间的通信。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*TgCkFcjlD9SxSrMvVX3DrA.png)\n\n在 Redux 中，也有一个类似的概念：智能组件和木偶组件。（译者注：在最新的 Redux 文档中，它们分别叫做容器型组件 Container component 和展示型组件 Presentational component）智能组件的职责就像经理一样，但是比起 Flux 中的角色，Redux 对经理的职责有了更多的定义：\n\n - 智能组件负责所有的 action 相关的工作。如果智能组件里包含的一个木偶组件需要触发一个 action，智能组件会通过 props 传一个 function 给木偶组件，而木偶组件可以在需要触发 action 时调用这个 function。\n - 智能组件不定义 CSS 样式。\n - 智能组件几乎不会产生自己的 DOM 节点，他的工作是组织若干的木偶组件，由木偶组件来生成最终的 DOM 节点。\n\n木偶组件不会直接依赖 action（译者注：即不会在木偶组件里 `require` action 相关的文件），因为所有的 action 都会当做 props 传下来。这意味着木偶组件可以被任何一个逻辑不同的 App 拿去使用。同时木偶组件也需要有一定的样式来让自己变得好看一些（当然你可以让木偶组件接受某些 props 作为设置样式的变量）。\n\n### 视图层绑定\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*D1RcVrMV2rp6AH9hk5xZ8g.png)\n\n要把 store 绑定到视图上，Redux 还需要一点帮助。如果你在使用 React，那么你需要使用 react-redux。\n\n视图绑定工作有点像为组件树服务的 IT 部门。IT 部门确保所有的组件都正确的绑定到 store 上，并处理各种技术上的细节，以确保余下层级的组件对绑定相关的操作毫无感知。\n\n视图层绑定引入了三个概念：\n\n 1. `<Provider>` 组件： 这个组件需要包裹在整个组件树的最外层。这个组件让根组件的所有子孙组件能够轻松的使用 `connect()` 方法绑定 store。\n 2. `connect()`：这是 `react-redux` 提供的一个方法。如果一个组件想要响应状态的变化，就把自己作为参数传给 connect() 的结果（译者注：connect() 返回的依然是一个函数），connect() 方法会处理与 store 绑定的细节，并通过 selector 确定该绑定 store 中哪一部分的数据。\n 3. `selector`：这是你自己编写的一个函数。这个函数声明了你的组件需要整个 store 中的哪一部分数据作为自己的 props。\n\n### 根组件\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*JXPeiNP-it60-QYKb-p2eQ.png)\n\n所有的 React 应用都存在一个根组件（root component）。他其实就是整个组件树最外层的那个组件，但是在 Redux 中，根组件还要承担额外的任务。\n\n根组件承担的角色有点像企业中的高管，他将整个团队整合到一起来完成某项任务。他会创建 store，并告诉 store 使用哪些 reducers，并最终完成视图层的绑定。\n\n当完成整个应用的初始化工作后，根组件的就不再插手整个应用的运行过程了。每一次重新渲染（re-render）都没有根组件什么事，这些活儿都由根组件下面的子组件完成，当然也少不了视图层绑定的功劳。\n\n## Redux 完成的运行流程\n\n让我们看看上述各个部分是怎样组合成一个可以运行的应用的。\n\n### 配置环节\n\n应用中的不同部分需要在配置环节中整合到一起。\n\n(1) **准备好 store。**根组件会创建 store，并通过 createStore(reducer) 方法告诉 store 该使用哪个根 reducer。与此同时，根 reducer 也通过 combineReducers() 方法组建了一只向自己汇报的 reducer 团队。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*8_fU31-jNQnQ0dp-wplm5w.png)\n\n(2) **设置 store 和组件之间的通信。**根组件将它所有的子组件包裹在 `<Provider>` 组件中，并建立了 Provider 与 store 之间的联系。\n\nProvider 本质上创建了一个用于更新视图组件的网络。那些智能组件通过 connect() 方法连入这个网络，以此确保他们能够获取到状态的更新。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*NYMutQLW8TcEgbO8VNeqHA.png)\n\n(3) **准备好 action callback。**为了让木偶组件更好的处理 action，智能组件可以用 `bindActionCreators()` 方法来创建 action callback。这样做之后，智能组件就能给木偶组件传入一个回调（callback）。对应的 action 会在木偶组件调用这个回调时被自动 dispatch。（译者注：使用 bindActionCreators() 使得木偶组件无需关心 action 的 type 等信息，只用调用 props 中的某个方法传入需要的参数作为 action 的 payload 即可）\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*aVoD3gGddKUy3VCxwylthQ.png)\n\n### 数据流\n\n现在我们的应用已经配置完成，用户可以开始操作了。让我们触发一个 action，看看数据是怎样流动的。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*GNDs7SY53lEhp7mX8V25lw.png)\n\n(1) 视图发出了一个 action，action creator 将这个 action 格式化并返回。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*p4EkWE_8upZ97Z0IapKDcQ.png)\n\n(2) 这个 action 要么被自动 dispatch（如果我们在配置阶段使用了 bindActionCreators()），要么由视图层手动 dispatch。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*zmFp3bmDq7b6Bvlo8Ineag.png)\n\n(3) store 接受到这个 action 后，将当前的状态树和这个 action 传给根 reducer。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*zrsSoAAyf4pqTMHiA6P8Ww.png)\n\n(4) 根 reducer 将整个状态树切分成一个个小块，然后将某一个小块分发给知道怎么处理这部分内容的子 reducer。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*-S_dYe6BoQBgwSRpF7Hriw.png)\n\n(5) 子 reducer 将传入的一小块状态树进行拷贝，然后在副本上进行修改，并最终将修改后的副本返回根 reducer。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*_R-rGNfKr2Xu2FlXNZNPJg.png)\n\n(6) 当所有的子 reducer 返回他们修改的副本之后，根 reducer 将这些部分再次组合起来形成一颗新的状态树。然后根 reducer 将这个新的状态树交还给 store，store 再把自己的状态置为这个最新的状态树。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*bUMekI8QlEfFxSBCuVuIkw.png)\n\n(7) store 告诉视图层绑定：「状态更新啦」\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*x6vBvUlFJktJqty56jr0QQ.png)\n\n(8) 视图层绑定让 store 把更新的状态传过来\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*qGatznV4QujuxGe49YfX5A.png)\n\n(9) 视图层绑定触发了一个重新渲染的操作（re-render）\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*Je2mow8mjYLngXreGGlIEg.png)\n\n这就是我所理解的 Redux，希望对你有所帮助。\n\n## 更多资源\n\n - [Redux 官方文档](http://rackt.org/redux/index.html)\n - [Redux 官方文档中文版](https://github.com/camsong/redux-in-chinese)\n - [The Evolution of Flux Frameworks](https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31)\n - [Smart and Dumb Components](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0)\n - [The upsides of using Redux](http://stackoverflow.com/a/32920459)\n - [The downsides of using Redux](http://stackoverflow.com/a/32916602)\n - [如何评价数据流管理架构 Redux?](https://www.zhihu.com/question/38591713/answer/77634014)","source":"_posts/cartoon Redux.md","raw":"\n---\ntitle: 《看漫画，学Redux》[转载]\ndate: 2017-06-07 10:00:41\ntags: [javascript, redux]\n---\n\n# 《看漫画，学 Redux》 —— A cartoon intro to Redux\n\n> 不写一行代码，轻松看懂 Redux 原理。 [原文](https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6)\n>\n> 如果你有任何疑惑，不妨在 [Issues](https://github.com/jasonslyvia/a-cartoon-intro-to-redux-cn/issues) 中提出。\n\nFlux 架构已然让人觉得有些迷惑，而比 Flux 更让人摸不着头脑的是 Flux 与 Redux 的区别。Redux 是一个基于 Flux 思想的新架构方式，本文将探讨它们的区别。\n\n如果你还没有看过[这篇关于 Flux 的文章](https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207)（译者注：也可以参考[这篇](https://www.zhihu.com/question/33864532/answer/57657275)），你应该先阅读一下。\n\n<!-- more -->\n\n## 为什么要改变 Flux？\n\nRedux 解决的问题和 Flux 一样，但 Redux 能做的还有更多。\n\n和 Flux 一样，Redux 让应用的状态变化变得更加可预测。如果你想改变应用的状态，就必须 dispatch 一个 action。你没有办法直接改变应用的状态，因为保存这些状态的东西（称为 store）只有 getter 而没有 setter。对于 Flux 和 Redux 来说，这些概念都是相似的。\n\n那么为什么要新设计一种架构呢？Redux 的创造者 Dan Abramov 发现了改进 Flux 架构的可能。他想要一个更好的开发者工具来调试 Flux 应用。他发现如果稍微对 Flux 架构进行一些调整，就可以开发出一款更好用的开发者工具，同时依然能享受 Flux 架构带给你的可预测性。\n\n确切的说，他想要的开发者工具包含了代码热替换（hot reload）和时间旅行（time travel）功能。然而要想在 Flux 架构上实现这些功能，确实有些麻烦。\n\n### 问题1：store 的代码无法被热替换，除非清空当前的状态\n\n在 Flux 中，store 包含了两样东西：\n\n 1. 改变状态的逻辑\n 2. 当前的状态\n\n在一个 store 中同时保存这两样东西将会导致代码热替换功能出现问题。当你热替换掉 store 的代码想要看看新的状态改变逻辑是否生效时，你就丢失了 store 中保存的当前状态。此外，你还把 store 与 Flux 架构中其它组件产生关系的事件系统搞乱了。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*L66K9uCQjjHmpAwT-a9C5Q.png)\n\n**解决方案**\n\n将这两样东西分开处理。让一个对象来保存状态，这个对象在热替换代码的时候不会受到影响。让另一个对象包含所有改变状态的逻辑，这个对象可以被热替换因为它不用关心任何保存状态相关的事情。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*nBsGCWmJTR-Zj7aXeIE8yg.png)\n\n### 问题2：每次触发 action 时状态对象都被直接改写了\n\n时间旅行调试法的特性是：你能掌握状态对象的每一次变化，这样的话，你就能轻松的跳回到这个对象之前的某个状态（想象一个撤销功能）。\n\n要实现这样的功能，每次状态改变之后，你都需要把旧的状态保存在一个数组中。但是由于 JavaScript 的对象引用特性，简单的把一个对象放进数组中并不能实现我们需要的功能。这样做不能创建一个快照（snapshot），而只是创建了一个新的指针指向同一个对象。\n\n所以要想实现时间旅行特性，每一个状态改变的版本都需要保存在不同的 JavaScript 对象中，这样你才不会不小心改变了某个历史版本的状态。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*4zODv5vgvKsi6Ts7TihsoA.png)\n\n**解决方案**\n\n当一个 action 需要 store 响应时，不要直接修改 store 中的状态，而是将状态拷贝一份并在这份拷贝的状态上做出修改。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*wLRhZ0wtI0duLsigdxL1CA.png)\n\n###问题3：没有合适的位置引入第三方插件\n\n当你在写一些调试性工具时，你希望它们能够更加通用。一个使用该工具的用户应该可以直接引入这个工具而不需要做额外的包装或桥接。\n\n要实现这样的特性，Flux 架构需要一个扩展点。\n\n一个简单的例子就是日志。比如说你希望 console.log() 每一个触发的 action 同时 console.log() 这个 action 被响应完成后的状态。在 Flux 中，你只能订阅（subscribe） dispatcher 的更新和每一个 store 的变动。但是这样就侵入了业务代码，这样的日志功能不是一个第三方插件能够轻易实现的。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*MG736zGtLMBbSkhwu4D3cA.png)\n\n**解决方案**\n\n将这个架构的部分功能包装进其他的对象中将使得我们的需求变得更容易实现。这些「其他对象」在架构原有的功能基础之上添加了自己的功能。你可以把这种扩展点看做是一个增强器（enhancers）或者高阶对象（higher order objects），亦或者中间件（middleware）。\n\n此外，使用一个树形结构来组织所有改变状态的逻辑，这样当状态发生改变的时候 store 只会触发一个事件来通知视图层（view），而这一个事件会被整棵树中的所有逻辑处理（译者注：「处理」不代表一定会改变状态，这些改变状态的逻辑本质上是函数，函数内部会根据 action 的类型等来确定是否对状态进行改变）。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*5JaZSc3Jsn9PJY7daEDVDA.png)\n\n*注意：就上述这些问题和解决方案来说，我主要在关注开发者工具这一使用场景。实际上，对 Flux 做出的这些改变在其他场景中也非常有帮助。在上述三点之外，Flux 和 Redux 还有更多的不同点。比如，相比于 Flux，Redux 精简了整个架构的冗余代码，并且复用 store 的逻辑变得更加简单。这里有一个 [Redux 优点的列表](http://stackoverflow.com/a/32920459)可供参考。\n\n那么让我们来看看 Redux 是怎么让这些特性变为现实的。\n\n## 新的角色\n\n从 Flux 演进到 Redux，整个架构中的角色发生了些许的变化。\n\n### Action creators\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*Uljrrh4Z7UiUwk8AjUO9PA.png)\n\nRedux 保留了 Flux 中 action creator 的概念。每当你想要改变应用中的状态时，你就要 dispatch 一个 action，这也是唯一改变状态的方法。\n\n就像我在[这篇关于 Flux 的文章](https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207)中提到的一样，我把 action creator 看做是一个报务员（负责发电报的人，telegraph operator），你找到 action creator 告诉他你大致上想要传达什么信息，action creator 则会把这些信息格式化为一种标准的格式，以便系统中的其他部分能够理解。\n\n与 Flux 不同的是，Redux 中的 action creator 不会直接把 action 发送给 dispatcher，而是返回一个格式化好的 JavaScript 对象。\n\n### The store\n\n我把 Flux 中 store 的那一套机制描述为一种控制过度的官僚体系。你不能简单直接的修改状态，而是要求所有的状态改变都必须由 store 亲自产生，还必须要经历 action 分发那种套路。在 Redux 中，store 依然是这么的充满控制欲和官僚主义，但是又有些不一样。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*Gztc7THzxzOgJmGvJ95IQA.png)\n\n在 Flux 中，你可以拥有多个 store，每一个 store 都有自己的统治权。每个 store 都保存着自己对应的那部分状态，以及所有修改这些状态的逻辑。\n\n而 Redux 中的 store 更喜欢将权力下放，事实上不得不这么做。因为在 Redux 中，你只能有一个 store……所以如果你打算像 Flux 那样让 store 完全独立处理自己的事情，那么在 Redux 中，store 里的工作量将变得非常大。\n\n因此，Redux 中的 store 首先会保存整个应用的所有状态，然后将「判断哪一部分状态需要改变」的任务分配下去。而以根 reducer（root reducer）为首的 reducer 们将会承担这个任务。\n\n你可能发现这里好像没有 dispatcher 什么事。是的，虽然看起来有点儿越权，但 Redux 里的 store 已经完全接管了 dispatcher 相关的工作。\n\n### The reducers\n\n当 store 需要知道一个 action 触发后状态需要怎么改变时，他会去询问 reducer。根 reducer 会根据状态对象的键（key）将整个状态树进行拆分，然后将拆分后的每一块子状态传到知道该怎么对这块状态进行响应的子 reducer 那里处理。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*Vocy_6Gl9PbFlCIJsE9r3A.png)\n\n我把 reducers 看做是对复印情有独钟的白领们。他们不希望把任何事搞砸，因此他们不会修改任何传递给他们的文件。取而代之的是，他们会对这些文件进行复印，然后在复印件上进行修改。（译者注：当然，当这些修改后的复印件定稿后，他们也不会再去修改这些复印件。）\n\n这是 Redux 的核心思想之一。不直接修改整个应用的状态树，而是将状态树的每一部分进行拷贝并修改拷贝后的部分，然后将这些部分重新组合成一颗新的状态树。\n\n子 reducers 会把他们创建的副本传回给根 reducer，而根 reducer 会把这些副本组合起来形成一颗新的状态树。最后根 reducer 将新的状态树传回给 store，store 再将新的状态树设为最终的状态。\n\n如果你有一个小型应用，你可能只有一个 reducer 对整个状态树进行拷贝并作出修改。又或者你有一个超大的应用，你可能会有若干个 reducers 对整个状态树进行修改。这也是 Flux 和 Redux 的另一处区别。在 Flux 中，store 并不需要与其他 store 产生关联，而且 store 的结构是扁平的。而在 Redux 中，reducers 是有层级结构的。这种层级结构可以有若干层，就像组件的层级结构那样。\n\n### The views: 智能组件（smart components）和木偶组件(dumb components)\n\nFlux 拥有控制型视图（controller views） 和常规型视图（regular views）。控制型视图就像是一个经理一样，管理着 store 和子视图（child views）之间的通信。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*TgCkFcjlD9SxSrMvVX3DrA.png)\n\n在 Redux 中，也有一个类似的概念：智能组件和木偶组件。（译者注：在最新的 Redux 文档中，它们分别叫做容器型组件 Container component 和展示型组件 Presentational component）智能组件的职责就像经理一样，但是比起 Flux 中的角色，Redux 对经理的职责有了更多的定义：\n\n - 智能组件负责所有的 action 相关的工作。如果智能组件里包含的一个木偶组件需要触发一个 action，智能组件会通过 props 传一个 function 给木偶组件，而木偶组件可以在需要触发 action 时调用这个 function。\n - 智能组件不定义 CSS 样式。\n - 智能组件几乎不会产生自己的 DOM 节点，他的工作是组织若干的木偶组件，由木偶组件来生成最终的 DOM 节点。\n\n木偶组件不会直接依赖 action（译者注：即不会在木偶组件里 `require` action 相关的文件），因为所有的 action 都会当做 props 传下来。这意味着木偶组件可以被任何一个逻辑不同的 App 拿去使用。同时木偶组件也需要有一定的样式来让自己变得好看一些（当然你可以让木偶组件接受某些 props 作为设置样式的变量）。\n\n### 视图层绑定\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*D1RcVrMV2rp6AH9hk5xZ8g.png)\n\n要把 store 绑定到视图上，Redux 还需要一点帮助。如果你在使用 React，那么你需要使用 react-redux。\n\n视图绑定工作有点像为组件树服务的 IT 部门。IT 部门确保所有的组件都正确的绑定到 store 上，并处理各种技术上的细节，以确保余下层级的组件对绑定相关的操作毫无感知。\n\n视图层绑定引入了三个概念：\n\n 1. `<Provider>` 组件： 这个组件需要包裹在整个组件树的最外层。这个组件让根组件的所有子孙组件能够轻松的使用 `connect()` 方法绑定 store。\n 2. `connect()`：这是 `react-redux` 提供的一个方法。如果一个组件想要响应状态的变化，就把自己作为参数传给 connect() 的结果（译者注：connect() 返回的依然是一个函数），connect() 方法会处理与 store 绑定的细节，并通过 selector 确定该绑定 store 中哪一部分的数据。\n 3. `selector`：这是你自己编写的一个函数。这个函数声明了你的组件需要整个 store 中的哪一部分数据作为自己的 props。\n\n### 根组件\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1200/1*JXPeiNP-it60-QYKb-p2eQ.png)\n\n所有的 React 应用都存在一个根组件（root component）。他其实就是整个组件树最外层的那个组件，但是在 Redux 中，根组件还要承担额外的任务。\n\n根组件承担的角色有点像企业中的高管，他将整个团队整合到一起来完成某项任务。他会创建 store，并告诉 store 使用哪些 reducers，并最终完成视图层的绑定。\n\n当完成整个应用的初始化工作后，根组件的就不再插手整个应用的运行过程了。每一次重新渲染（re-render）都没有根组件什么事，这些活儿都由根组件下面的子组件完成，当然也少不了视图层绑定的功劳。\n\n## Redux 完成的运行流程\n\n让我们看看上述各个部分是怎样组合成一个可以运行的应用的。\n\n### 配置环节\n\n应用中的不同部分需要在配置环节中整合到一起。\n\n(1) **准备好 store。**根组件会创建 store，并通过 createStore(reducer) 方法告诉 store 该使用哪个根 reducer。与此同时，根 reducer 也通过 combineReducers() 方法组建了一只向自己汇报的 reducer 团队。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*8_fU31-jNQnQ0dp-wplm5w.png)\n\n(2) **设置 store 和组件之间的通信。**根组件将它所有的子组件包裹在 `<Provider>` 组件中，并建立了 Provider 与 store 之间的联系。\n\nProvider 本质上创建了一个用于更新视图组件的网络。那些智能组件通过 connect() 方法连入这个网络，以此确保他们能够获取到状态的更新。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*NYMutQLW8TcEgbO8VNeqHA.png)\n\n(3) **准备好 action callback。**为了让木偶组件更好的处理 action，智能组件可以用 `bindActionCreators()` 方法来创建 action callback。这样做之后，智能组件就能给木偶组件传入一个回调（callback）。对应的 action 会在木偶组件调用这个回调时被自动 dispatch。（译者注：使用 bindActionCreators() 使得木偶组件无需关心 action 的 type 等信息，只用调用 props 中的某个方法传入需要的参数作为 action 的 payload 即可）\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*aVoD3gGddKUy3VCxwylthQ.png)\n\n### 数据流\n\n现在我们的应用已经配置完成，用户可以开始操作了。让我们触发一个 action，看看数据是怎样流动的。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*GNDs7SY53lEhp7mX8V25lw.png)\n\n(1) 视图发出了一个 action，action creator 将这个 action 格式化并返回。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*p4EkWE_8upZ97Z0IapKDcQ.png)\n\n(2) 这个 action 要么被自动 dispatch（如果我们在配置阶段使用了 bindActionCreators()），要么由视图层手动 dispatch。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*zmFp3bmDq7b6Bvlo8Ineag.png)\n\n(3) store 接受到这个 action 后，将当前的状态树和这个 action 传给根 reducer。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*zrsSoAAyf4pqTMHiA6P8Ww.png)\n\n(4) 根 reducer 将整个状态树切分成一个个小块，然后将某一个小块分发给知道怎么处理这部分内容的子 reducer。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*-S_dYe6BoQBgwSRpF7Hriw.png)\n\n(5) 子 reducer 将传入的一小块状态树进行拷贝，然后在副本上进行修改，并最终将修改后的副本返回根 reducer。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*_R-rGNfKr2Xu2FlXNZNPJg.png)\n\n(6) 当所有的子 reducer 返回他们修改的副本之后，根 reducer 将这些部分再次组合起来形成一颗新的状态树。然后根 reducer 将这个新的状态树交还给 store，store 再把自己的状态置为这个最新的状态树。\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*bUMekI8QlEfFxSBCuVuIkw.png)\n\n(7) store 告诉视图层绑定：「状态更新啦」\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*x6vBvUlFJktJqty56jr0QQ.png)\n\n(8) 视图层绑定让 store 把更新的状态传过来\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*qGatznV4QujuxGe49YfX5A.png)\n\n(9) 视图层绑定触发了一个重新渲染的操作（re-render）\n\n![](https://d262ilb51hltx0.cloudfront.net/max/1600/1*Je2mow8mjYLngXreGGlIEg.png)\n\n这就是我所理解的 Redux，希望对你有所帮助。\n\n## 更多资源\n\n - [Redux 官方文档](http://rackt.org/redux/index.html)\n - [Redux 官方文档中文版](https://github.com/camsong/redux-in-chinese)\n - [The Evolution of Flux Frameworks](https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31)\n - [Smart and Dumb Components](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0)\n - [The upsides of using Redux](http://stackoverflow.com/a/32920459)\n - [The downsides of using Redux](http://stackoverflow.com/a/32916602)\n - [如何评价数据流管理架构 Redux?](https://www.zhihu.com/question/38591713/answer/77634014)","slug":"cartoon Redux","published":1,"updated":"2017-08-15T06:26:19.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadh890009lk90e5wi1u4e","content":"<h1 id=\"《看漫画，学-Redux》-——-A-cartoon-intro-to-Redux\"><a href=\"#《看漫画，学-Redux》-——-A-cartoon-intro-to-Redux\" class=\"headerlink\" title=\"《看漫画，学 Redux》 —— A cartoon intro to Redux\"></a>《看漫画，学 Redux》 —— A cartoon intro to Redux</h1><blockquote>\n<p>不写一行代码，轻松看懂 Redux 原理。 <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\" target=\"_blank\" rel=\"external\">原文</a></p>\n<p>如果你有任何疑惑，不妨在 <a href=\"https://github.com/jasonslyvia/a-cartoon-intro-to-redux-cn/issues\" target=\"_blank\" rel=\"external\">Issues</a> 中提出。</p>\n</blockquote>\n<p>Flux 架构已然让人觉得有些迷惑，而比 Flux 更让人摸不着头脑的是 Flux 与 Redux 的区别。Redux 是一个基于 Flux 思想的新架构方式，本文将探讨它们的区别。</p>\n<p>如果你还没有看过<a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\" target=\"_blank\" rel=\"external\">这篇关于 Flux 的文章</a>（译者注：也可以参考<a href=\"https://www.zhihu.com/question/33864532/answer/57657275\" target=\"_blank\" rel=\"external\">这篇</a>），你应该先阅读一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"为什么要改变-Flux？\"><a href=\"#为什么要改变-Flux？\" class=\"headerlink\" title=\"为什么要改变 Flux？\"></a>为什么要改变 Flux？</h2><p>Redux 解决的问题和 Flux 一样，但 Redux 能做的还有更多。</p>\n<p>和 Flux 一样，Redux 让应用的状态变化变得更加可预测。如果你想改变应用的状态，就必须 dispatch 一个 action。你没有办法直接改变应用的状态，因为保存这些状态的东西（称为 store）只有 getter 而没有 setter。对于 Flux 和 Redux 来说，这些概念都是相似的。</p>\n<p>那么为什么要新设计一种架构呢？Redux 的创造者 Dan Abramov 发现了改进 Flux 架构的可能。他想要一个更好的开发者工具来调试 Flux 应用。他发现如果稍微对 Flux 架构进行一些调整，就可以开发出一款更好用的开发者工具，同时依然能享受 Flux 架构带给你的可预测性。</p>\n<p>确切的说，他想要的开发者工具包含了代码热替换（hot reload）和时间旅行（time travel）功能。然而要想在 Flux 架构上实现这些功能，确实有些麻烦。</p>\n<h3 id=\"问题1：store-的代码无法被热替换，除非清空当前的状态\"><a href=\"#问题1：store-的代码无法被热替换，除非清空当前的状态\" class=\"headerlink\" title=\"问题1：store 的代码无法被热替换，除非清空当前的状态\"></a>问题1：store 的代码无法被热替换，除非清空当前的状态</h3><p>在 Flux 中，store 包含了两样东西：</p>\n<ol>\n<li>改变状态的逻辑</li>\n<li>当前的状态</li>\n</ol>\n<p>在一个 store 中同时保存这两样东西将会导致代码热替换功能出现问题。当你热替换掉 store 的代码想要看看新的状态改变逻辑是否生效时，你就丢失了 store 中保存的当前状态。此外，你还把 store 与 Flux 架构中其它组件产生关系的事件系统搞乱了。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*L66K9uCQjjHmpAwT-a9C5Q.png\" alt=\"\"></p>\n<p><strong>解决方案</strong></p>\n<p>将这两样东西分开处理。让一个对象来保存状态，这个对象在热替换代码的时候不会受到影响。让另一个对象包含所有改变状态的逻辑，这个对象可以被热替换因为它不用关心任何保存状态相关的事情。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*nBsGCWmJTR-Zj7aXeIE8yg.png\" alt=\"\"></p>\n<h3 id=\"问题2：每次触发-action-时状态对象都被直接改写了\"><a href=\"#问题2：每次触发-action-时状态对象都被直接改写了\" class=\"headerlink\" title=\"问题2：每次触发 action 时状态对象都被直接改写了\"></a>问题2：每次触发 action 时状态对象都被直接改写了</h3><p>时间旅行调试法的特性是：你能掌握状态对象的每一次变化，这样的话，你就能轻松的跳回到这个对象之前的某个状态（想象一个撤销功能）。</p>\n<p>要实现这样的功能，每次状态改变之后，你都需要把旧的状态保存在一个数组中。但是由于 JavaScript 的对象引用特性，简单的把一个对象放进数组中并不能实现我们需要的功能。这样做不能创建一个快照（snapshot），而只是创建了一个新的指针指向同一个对象。</p>\n<p>所以要想实现时间旅行特性，每一个状态改变的版本都需要保存在不同的 JavaScript 对象中，这样你才不会不小心改变了某个历史版本的状态。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*4zODv5vgvKsi6Ts7TihsoA.png\" alt=\"\"></p>\n<p><strong>解决方案</strong></p>\n<p>当一个 action 需要 store 响应时，不要直接修改 store 中的状态，而是将状态拷贝一份并在这份拷贝的状态上做出修改。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*wLRhZ0wtI0duLsigdxL1CA.png\" alt=\"\"></p>\n<p>###问题3：没有合适的位置引入第三方插件</p>\n<p>当你在写一些调试性工具时，你希望它们能够更加通用。一个使用该工具的用户应该可以直接引入这个工具而不需要做额外的包装或桥接。</p>\n<p>要实现这样的特性，Flux 架构需要一个扩展点。</p>\n<p>一个简单的例子就是日志。比如说你希望 console.log() 每一个触发的 action 同时 console.log() 这个 action 被响应完成后的状态。在 Flux 中，你只能订阅（subscribe） dispatcher 的更新和每一个 store 的变动。但是这样就侵入了业务代码，这样的日志功能不是一个第三方插件能够轻易实现的。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*MG736zGtLMBbSkhwu4D3cA.png\" alt=\"\"></p>\n<p><strong>解决方案</strong></p>\n<p>将这个架构的部分功能包装进其他的对象中将使得我们的需求变得更容易实现。这些「其他对象」在架构原有的功能基础之上添加了自己的功能。你可以把这种扩展点看做是一个增强器（enhancers）或者高阶对象（higher order objects），亦或者中间件（middleware）。</p>\n<p>此外，使用一个树形结构来组织所有改变状态的逻辑，这样当状态发生改变的时候 store 只会触发一个事件来通知视图层（view），而这一个事件会被整棵树中的所有逻辑处理（译者注：「处理」不代表一定会改变状态，这些改变状态的逻辑本质上是函数，函数内部会根据 action 的类型等来确定是否对状态进行改变）。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*5JaZSc3Jsn9PJY7daEDVDA.png\" alt=\"\"></p>\n<p>*注意：就上述这些问题和解决方案来说，我主要在关注开发者工具这一使用场景。实际上，对 Flux 做出的这些改变在其他场景中也非常有帮助。在上述三点之外，Flux 和 Redux 还有更多的不同点。比如，相比于 Flux，Redux 精简了整个架构的冗余代码，并且复用 store 的逻辑变得更加简单。这里有一个 <a href=\"http://stackoverflow.com/a/32920459\" target=\"_blank\" rel=\"external\">Redux 优点的列表</a>可供参考。</p>\n<p>那么让我们来看看 Redux 是怎么让这些特性变为现实的。</p>\n<h2 id=\"新的角色\"><a href=\"#新的角色\" class=\"headerlink\" title=\"新的角色\"></a>新的角色</h2><p>从 Flux 演进到 Redux，整个架构中的角色发生了些许的变化。</p>\n<h3 id=\"Action-creators\"><a href=\"#Action-creators\" class=\"headerlink\" title=\"Action creators\"></a>Action creators</h3><p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*Uljrrh4Z7UiUwk8AjUO9PA.png\" alt=\"\"></p>\n<p>Redux 保留了 Flux 中 action creator 的概念。每当你想要改变应用中的状态时，你就要 dispatch 一个 action，这也是唯一改变状态的方法。</p>\n<p>就像我在<a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\" target=\"_blank\" rel=\"external\">这篇关于 Flux 的文章</a>中提到的一样，我把 action creator 看做是一个报务员（负责发电报的人，telegraph operator），你找到 action creator 告诉他你大致上想要传达什么信息，action creator 则会把这些信息格式化为一种标准的格式，以便系统中的其他部分能够理解。</p>\n<p>与 Flux 不同的是，Redux 中的 action creator 不会直接把 action 发送给 dispatcher，而是返回一个格式化好的 JavaScript 对象。</p>\n<h3 id=\"The-store\"><a href=\"#The-store\" class=\"headerlink\" title=\"The store\"></a>The store</h3><p>我把 Flux 中 store 的那一套机制描述为一种控制过度的官僚体系。你不能简单直接的修改状态，而是要求所有的状态改变都必须由 store 亲自产生，还必须要经历 action 分发那种套路。在 Redux 中，store 依然是这么的充满控制欲和官僚主义，但是又有些不一样。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*Gztc7THzxzOgJmGvJ95IQA.png\" alt=\"\"></p>\n<p>在 Flux 中，你可以拥有多个 store，每一个 store 都有自己的统治权。每个 store 都保存着自己对应的那部分状态，以及所有修改这些状态的逻辑。</p>\n<p>而 Redux 中的 store 更喜欢将权力下放，事实上不得不这么做。因为在 Redux 中，你只能有一个 store……所以如果你打算像 Flux 那样让 store 完全独立处理自己的事情，那么在 Redux 中，store 里的工作量将变得非常大。</p>\n<p>因此，Redux 中的 store 首先会保存整个应用的所有状态，然后将「判断哪一部分状态需要改变」的任务分配下去。而以根 reducer（root reducer）为首的 reducer 们将会承担这个任务。</p>\n<p>你可能发现这里好像没有 dispatcher 什么事。是的，虽然看起来有点儿越权，但 Redux 里的 store 已经完全接管了 dispatcher 相关的工作。</p>\n<h3 id=\"The-reducers\"><a href=\"#The-reducers\" class=\"headerlink\" title=\"The reducers\"></a>The reducers</h3><p>当 store 需要知道一个 action 触发后状态需要怎么改变时，他会去询问 reducer。根 reducer 会根据状态对象的键（key）将整个状态树进行拆分，然后将拆分后的每一块子状态传到知道该怎么对这块状态进行响应的子 reducer 那里处理。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*Vocy_6Gl9PbFlCIJsE9r3A.png\" alt=\"\"></p>\n<p>我把 reducers 看做是对复印情有独钟的白领们。他们不希望把任何事搞砸，因此他们不会修改任何传递给他们的文件。取而代之的是，他们会对这些文件进行复印，然后在复印件上进行修改。（译者注：当然，当这些修改后的复印件定稿后，他们也不会再去修改这些复印件。）</p>\n<p>这是 Redux 的核心思想之一。不直接修改整个应用的状态树，而是将状态树的每一部分进行拷贝并修改拷贝后的部分，然后将这些部分重新组合成一颗新的状态树。</p>\n<p>子 reducers 会把他们创建的副本传回给根 reducer，而根 reducer 会把这些副本组合起来形成一颗新的状态树。最后根 reducer 将新的状态树传回给 store，store 再将新的状态树设为最终的状态。</p>\n<p>如果你有一个小型应用，你可能只有一个 reducer 对整个状态树进行拷贝并作出修改。又或者你有一个超大的应用，你可能会有若干个 reducers 对整个状态树进行修改。这也是 Flux 和 Redux 的另一处区别。在 Flux 中，store 并不需要与其他 store 产生关联，而且 store 的结构是扁平的。而在 Redux 中，reducers 是有层级结构的。这种层级结构可以有若干层，就像组件的层级结构那样。</p>\n<h3 id=\"The-views-智能组件（smart-components）和木偶组件-dumb-components\"><a href=\"#The-views-智能组件（smart-components）和木偶组件-dumb-components\" class=\"headerlink\" title=\"The views: 智能组件（smart components）和木偶组件(dumb components)\"></a>The views: 智能组件（smart components）和木偶组件(dumb components)</h3><p>Flux 拥有控制型视图（controller views） 和常规型视图（regular views）。控制型视图就像是一个经理一样，管理着 store 和子视图（child views）之间的通信。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*TgCkFcjlD9SxSrMvVX3DrA.png\" alt=\"\"></p>\n<p>在 Redux 中，也有一个类似的概念：智能组件和木偶组件。（译者注：在最新的 Redux 文档中，它们分别叫做容器型组件 Container component 和展示型组件 Presentational component）智能组件的职责就像经理一样，但是比起 Flux 中的角色，Redux 对经理的职责有了更多的定义：</p>\n<ul>\n<li>智能组件负责所有的 action 相关的工作。如果智能组件里包含的一个木偶组件需要触发一个 action，智能组件会通过 props 传一个 function 给木偶组件，而木偶组件可以在需要触发 action 时调用这个 function。</li>\n<li>智能组件不定义 CSS 样式。</li>\n<li>智能组件几乎不会产生自己的 DOM 节点，他的工作是组织若干的木偶组件，由木偶组件来生成最终的 DOM 节点。</li>\n</ul>\n<p>木偶组件不会直接依赖 action（译者注：即不会在木偶组件里 <code>require</code> action 相关的文件），因为所有的 action 都会当做 props 传下来。这意味着木偶组件可以被任何一个逻辑不同的 App 拿去使用。同时木偶组件也需要有一定的样式来让自己变得好看一些（当然你可以让木偶组件接受某些 props 作为设置样式的变量）。</p>\n<h3 id=\"视图层绑定\"><a href=\"#视图层绑定\" class=\"headerlink\" title=\"视图层绑定\"></a>视图层绑定</h3><p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*D1RcVrMV2rp6AH9hk5xZ8g.png\" alt=\"\"></p>\n<p>要把 store 绑定到视图上，Redux 还需要一点帮助。如果你在使用 React，那么你需要使用 react-redux。</p>\n<p>视图绑定工作有点像为组件树服务的 IT 部门。IT 部门确保所有的组件都正确的绑定到 store 上，并处理各种技术上的细节，以确保余下层级的组件对绑定相关的操作毫无感知。</p>\n<p>视图层绑定引入了三个概念：</p>\n<ol>\n<li><code>&lt;Provider&gt;</code> 组件： 这个组件需要包裹在整个组件树的最外层。这个组件让根组件的所有子孙组件能够轻松的使用 <code>connect()</code> 方法绑定 store。</li>\n<li><code>connect()</code>：这是 <code>react-redux</code> 提供的一个方法。如果一个组件想要响应状态的变化，就把自己作为参数传给 connect() 的结果（译者注：connect() 返回的依然是一个函数），connect() 方法会处理与 store 绑定的细节，并通过 selector 确定该绑定 store 中哪一部分的数据。</li>\n<li><code>selector</code>：这是你自己编写的一个函数。这个函数声明了你的组件需要整个 store 中的哪一部分数据作为自己的 props。</li>\n</ol>\n<h3 id=\"根组件\"><a href=\"#根组件\" class=\"headerlink\" title=\"根组件\"></a>根组件</h3><p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*JXPeiNP-it60-QYKb-p2eQ.png\" alt=\"\"></p>\n<p>所有的 React 应用都存在一个根组件（root component）。他其实就是整个组件树最外层的那个组件，但是在 Redux 中，根组件还要承担额外的任务。</p>\n<p>根组件承担的角色有点像企业中的高管，他将整个团队整合到一起来完成某项任务。他会创建 store，并告诉 store 使用哪些 reducers，并最终完成视图层的绑定。</p>\n<p>当完成整个应用的初始化工作后，根组件的就不再插手整个应用的运行过程了。每一次重新渲染（re-render）都没有根组件什么事，这些活儿都由根组件下面的子组件完成，当然也少不了视图层绑定的功劳。</p>\n<h2 id=\"Redux-完成的运行流程\"><a href=\"#Redux-完成的运行流程\" class=\"headerlink\" title=\"Redux 完成的运行流程\"></a>Redux 完成的运行流程</h2><p>让我们看看上述各个部分是怎样组合成一个可以运行的应用的。</p>\n<h3 id=\"配置环节\"><a href=\"#配置环节\" class=\"headerlink\" title=\"配置环节\"></a>配置环节</h3><p>应用中的不同部分需要在配置环节中整合到一起。</p>\n<p>(1) <strong>准备好 store。</strong>根组件会创建 store，并通过 createStore(reducer) 方法告诉 store 该使用哪个根 reducer。与此同时，根 reducer 也通过 combineReducers() 方法组建了一只向自己汇报的 reducer 团队。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*8_fU31-jNQnQ0dp-wplm5w.png\" alt=\"\"></p>\n<p>(2) <strong>设置 store 和组件之间的通信。</strong>根组件将它所有的子组件包裹在 <code>&lt;Provider&gt;</code> 组件中，并建立了 Provider 与 store 之间的联系。</p>\n<p>Provider 本质上创建了一个用于更新视图组件的网络。那些智能组件通过 connect() 方法连入这个网络，以此确保他们能够获取到状态的更新。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*NYMutQLW8TcEgbO8VNeqHA.png\" alt=\"\"></p>\n<p>(3) <strong>准备好 action callback。</strong>为了让木偶组件更好的处理 action，智能组件可以用 <code>bindActionCreators()</code> 方法来创建 action callback。这样做之后，智能组件就能给木偶组件传入一个回调（callback）。对应的 action 会在木偶组件调用这个回调时被自动 dispatch。（译者注：使用 bindActionCreators() 使得木偶组件无需关心 action 的 type 等信息，只用调用 props 中的某个方法传入需要的参数作为 action 的 payload 即可）</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*aVoD3gGddKUy3VCxwylthQ.png\" alt=\"\"></p>\n<h3 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h3><p>现在我们的应用已经配置完成，用户可以开始操作了。让我们触发一个 action，看看数据是怎样流动的。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*GNDs7SY53lEhp7mX8V25lw.png\" alt=\"\"></p>\n<p>(1) 视图发出了一个 action，action creator 将这个 action 格式化并返回。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*p4EkWE_8upZ97Z0IapKDcQ.png\" alt=\"\"></p>\n<p>(2) 这个 action 要么被自动 dispatch（如果我们在配置阶段使用了 bindActionCreators()），要么由视图层手动 dispatch。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*zmFp3bmDq7b6Bvlo8Ineag.png\" alt=\"\"></p>\n<p>(3) store 接受到这个 action 后，将当前的状态树和这个 action 传给根 reducer。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*zrsSoAAyf4pqTMHiA6P8Ww.png\" alt=\"\"></p>\n<p>(4) 根 reducer 将整个状态树切分成一个个小块，然后将某一个小块分发给知道怎么处理这部分内容的子 reducer。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*-S_dYe6BoQBgwSRpF7Hriw.png\" alt=\"\"></p>\n<p>(5) 子 reducer 将传入的一小块状态树进行拷贝，然后在副本上进行修改，并最终将修改后的副本返回根 reducer。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*_R-rGNfKr2Xu2FlXNZNPJg.png\" alt=\"\"></p>\n<p>(6) 当所有的子 reducer 返回他们修改的副本之后，根 reducer 将这些部分再次组合起来形成一颗新的状态树。然后根 reducer 将这个新的状态树交还给 store，store 再把自己的状态置为这个最新的状态树。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*bUMekI8QlEfFxSBCuVuIkw.png\" alt=\"\"></p>\n<p>(7) store 告诉视图层绑定：「状态更新啦」</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*x6vBvUlFJktJqty56jr0QQ.png\" alt=\"\"></p>\n<p>(8) 视图层绑定让 store 把更新的状态传过来</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*qGatznV4QujuxGe49YfX5A.png\" alt=\"\"></p>\n<p>(9) 视图层绑定触发了一个重新渲染的操作（re-render）</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*Je2mow8mjYLngXreGGlIEg.png\" alt=\"\"></p>\n<p>这就是我所理解的 Redux，希望对你有所帮助。</p>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"http://rackt.org/redux/index.html\" target=\"_blank\" rel=\"external\">Redux 官方文档</a></li>\n<li><a href=\"https://github.com/camsong/redux-in-chinese\" target=\"_blank\" rel=\"external\">Redux 官方文档中文版</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31\" target=\"_blank\" rel=\"external\">The Evolution of Flux Frameworks</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\" target=\"_blank\" rel=\"external\">Smart and Dumb Components</a></li>\n<li><a href=\"http://stackoverflow.com/a/32920459\" target=\"_blank\" rel=\"external\">The upsides of using Redux</a></li>\n<li><a href=\"http://stackoverflow.com/a/32916602\" target=\"_blank\" rel=\"external\">The downsides of using Redux</a></li>\n<li><a href=\"https://www.zhihu.com/question/38591713/answer/77634014\" target=\"_blank\" rel=\"external\">如何评价数据流管理架构 Redux?</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"《看漫画，学-Redux》-——-A-cartoon-intro-to-Redux\"><a href=\"#《看漫画，学-Redux》-——-A-cartoon-intro-to-Redux\" class=\"headerlink\" title=\"《看漫画，学 Redux》 —— A cartoon intro to Redux\"></a>《看漫画，学 Redux》 —— A cartoon intro to Redux</h1><blockquote>\n<p>不写一行代码，轻松看懂 Redux 原理。 <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\" target=\"_blank\" rel=\"external\">原文</a></p>\n<p>如果你有任何疑惑，不妨在 <a href=\"https://github.com/jasonslyvia/a-cartoon-intro-to-redux-cn/issues\" target=\"_blank\" rel=\"external\">Issues</a> 中提出。</p>\n</blockquote>\n<p>Flux 架构已然让人觉得有些迷惑，而比 Flux 更让人摸不着头脑的是 Flux 与 Redux 的区别。Redux 是一个基于 Flux 思想的新架构方式，本文将探讨它们的区别。</p>\n<p>如果你还没有看过<a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\" target=\"_blank\" rel=\"external\">这篇关于 Flux 的文章</a>（译者注：也可以参考<a href=\"https://www.zhihu.com/question/33864532/answer/57657275\" target=\"_blank\" rel=\"external\">这篇</a>），你应该先阅读一下。</p>","more":"<h2 id=\"为什么要改变-Flux？\"><a href=\"#为什么要改变-Flux？\" class=\"headerlink\" title=\"为什么要改变 Flux？\"></a>为什么要改变 Flux？</h2><p>Redux 解决的问题和 Flux 一样，但 Redux 能做的还有更多。</p>\n<p>和 Flux 一样，Redux 让应用的状态变化变得更加可预测。如果你想改变应用的状态，就必须 dispatch 一个 action。你没有办法直接改变应用的状态，因为保存这些状态的东西（称为 store）只有 getter 而没有 setter。对于 Flux 和 Redux 来说，这些概念都是相似的。</p>\n<p>那么为什么要新设计一种架构呢？Redux 的创造者 Dan Abramov 发现了改进 Flux 架构的可能。他想要一个更好的开发者工具来调试 Flux 应用。他发现如果稍微对 Flux 架构进行一些调整，就可以开发出一款更好用的开发者工具，同时依然能享受 Flux 架构带给你的可预测性。</p>\n<p>确切的说，他想要的开发者工具包含了代码热替换（hot reload）和时间旅行（time travel）功能。然而要想在 Flux 架构上实现这些功能，确实有些麻烦。</p>\n<h3 id=\"问题1：store-的代码无法被热替换，除非清空当前的状态\"><a href=\"#问题1：store-的代码无法被热替换，除非清空当前的状态\" class=\"headerlink\" title=\"问题1：store 的代码无法被热替换，除非清空当前的状态\"></a>问题1：store 的代码无法被热替换，除非清空当前的状态</h3><p>在 Flux 中，store 包含了两样东西：</p>\n<ol>\n<li>改变状态的逻辑</li>\n<li>当前的状态</li>\n</ol>\n<p>在一个 store 中同时保存这两样东西将会导致代码热替换功能出现问题。当你热替换掉 store 的代码想要看看新的状态改变逻辑是否生效时，你就丢失了 store 中保存的当前状态。此外，你还把 store 与 Flux 架构中其它组件产生关系的事件系统搞乱了。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*L66K9uCQjjHmpAwT-a9C5Q.png\" alt=\"\"></p>\n<p><strong>解决方案</strong></p>\n<p>将这两样东西分开处理。让一个对象来保存状态，这个对象在热替换代码的时候不会受到影响。让另一个对象包含所有改变状态的逻辑，这个对象可以被热替换因为它不用关心任何保存状态相关的事情。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*nBsGCWmJTR-Zj7aXeIE8yg.png\" alt=\"\"></p>\n<h3 id=\"问题2：每次触发-action-时状态对象都被直接改写了\"><a href=\"#问题2：每次触发-action-时状态对象都被直接改写了\" class=\"headerlink\" title=\"问题2：每次触发 action 时状态对象都被直接改写了\"></a>问题2：每次触发 action 时状态对象都被直接改写了</h3><p>时间旅行调试法的特性是：你能掌握状态对象的每一次变化，这样的话，你就能轻松的跳回到这个对象之前的某个状态（想象一个撤销功能）。</p>\n<p>要实现这样的功能，每次状态改变之后，你都需要把旧的状态保存在一个数组中。但是由于 JavaScript 的对象引用特性，简单的把一个对象放进数组中并不能实现我们需要的功能。这样做不能创建一个快照（snapshot），而只是创建了一个新的指针指向同一个对象。</p>\n<p>所以要想实现时间旅行特性，每一个状态改变的版本都需要保存在不同的 JavaScript 对象中，这样你才不会不小心改变了某个历史版本的状态。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*4zODv5vgvKsi6Ts7TihsoA.png\" alt=\"\"></p>\n<p><strong>解决方案</strong></p>\n<p>当一个 action 需要 store 响应时，不要直接修改 store 中的状态，而是将状态拷贝一份并在这份拷贝的状态上做出修改。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*wLRhZ0wtI0duLsigdxL1CA.png\" alt=\"\"></p>\n<p>###问题3：没有合适的位置引入第三方插件</p>\n<p>当你在写一些调试性工具时，你希望它们能够更加通用。一个使用该工具的用户应该可以直接引入这个工具而不需要做额外的包装或桥接。</p>\n<p>要实现这样的特性，Flux 架构需要一个扩展点。</p>\n<p>一个简单的例子就是日志。比如说你希望 console.log() 每一个触发的 action 同时 console.log() 这个 action 被响应完成后的状态。在 Flux 中，你只能订阅（subscribe） dispatcher 的更新和每一个 store 的变动。但是这样就侵入了业务代码，这样的日志功能不是一个第三方插件能够轻易实现的。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*MG736zGtLMBbSkhwu4D3cA.png\" alt=\"\"></p>\n<p><strong>解决方案</strong></p>\n<p>将这个架构的部分功能包装进其他的对象中将使得我们的需求变得更容易实现。这些「其他对象」在架构原有的功能基础之上添加了自己的功能。你可以把这种扩展点看做是一个增强器（enhancers）或者高阶对象（higher order objects），亦或者中间件（middleware）。</p>\n<p>此外，使用一个树形结构来组织所有改变状态的逻辑，这样当状态发生改变的时候 store 只会触发一个事件来通知视图层（view），而这一个事件会被整棵树中的所有逻辑处理（译者注：「处理」不代表一定会改变状态，这些改变状态的逻辑本质上是函数，函数内部会根据 action 的类型等来确定是否对状态进行改变）。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*5JaZSc3Jsn9PJY7daEDVDA.png\" alt=\"\"></p>\n<p>*注意：就上述这些问题和解决方案来说，我主要在关注开发者工具这一使用场景。实际上，对 Flux 做出的这些改变在其他场景中也非常有帮助。在上述三点之外，Flux 和 Redux 还有更多的不同点。比如，相比于 Flux，Redux 精简了整个架构的冗余代码，并且复用 store 的逻辑变得更加简单。这里有一个 <a href=\"http://stackoverflow.com/a/32920459\" target=\"_blank\" rel=\"external\">Redux 优点的列表</a>可供参考。</p>\n<p>那么让我们来看看 Redux 是怎么让这些特性变为现实的。</p>\n<h2 id=\"新的角色\"><a href=\"#新的角色\" class=\"headerlink\" title=\"新的角色\"></a>新的角色</h2><p>从 Flux 演进到 Redux，整个架构中的角色发生了些许的变化。</p>\n<h3 id=\"Action-creators\"><a href=\"#Action-creators\" class=\"headerlink\" title=\"Action creators\"></a>Action creators</h3><p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*Uljrrh4Z7UiUwk8AjUO9PA.png\" alt=\"\"></p>\n<p>Redux 保留了 Flux 中 action creator 的概念。每当你想要改变应用中的状态时，你就要 dispatch 一个 action，这也是唯一改变状态的方法。</p>\n<p>就像我在<a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\" target=\"_blank\" rel=\"external\">这篇关于 Flux 的文章</a>中提到的一样，我把 action creator 看做是一个报务员（负责发电报的人，telegraph operator），你找到 action creator 告诉他你大致上想要传达什么信息，action creator 则会把这些信息格式化为一种标准的格式，以便系统中的其他部分能够理解。</p>\n<p>与 Flux 不同的是，Redux 中的 action creator 不会直接把 action 发送给 dispatcher，而是返回一个格式化好的 JavaScript 对象。</p>\n<h3 id=\"The-store\"><a href=\"#The-store\" class=\"headerlink\" title=\"The store\"></a>The store</h3><p>我把 Flux 中 store 的那一套机制描述为一种控制过度的官僚体系。你不能简单直接的修改状态，而是要求所有的状态改变都必须由 store 亲自产生，还必须要经历 action 分发那种套路。在 Redux 中，store 依然是这么的充满控制欲和官僚主义，但是又有些不一样。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*Gztc7THzxzOgJmGvJ95IQA.png\" alt=\"\"></p>\n<p>在 Flux 中，你可以拥有多个 store，每一个 store 都有自己的统治权。每个 store 都保存着自己对应的那部分状态，以及所有修改这些状态的逻辑。</p>\n<p>而 Redux 中的 store 更喜欢将权力下放，事实上不得不这么做。因为在 Redux 中，你只能有一个 store……所以如果你打算像 Flux 那样让 store 完全独立处理自己的事情，那么在 Redux 中，store 里的工作量将变得非常大。</p>\n<p>因此，Redux 中的 store 首先会保存整个应用的所有状态，然后将「判断哪一部分状态需要改变」的任务分配下去。而以根 reducer（root reducer）为首的 reducer 们将会承担这个任务。</p>\n<p>你可能发现这里好像没有 dispatcher 什么事。是的，虽然看起来有点儿越权，但 Redux 里的 store 已经完全接管了 dispatcher 相关的工作。</p>\n<h3 id=\"The-reducers\"><a href=\"#The-reducers\" class=\"headerlink\" title=\"The reducers\"></a>The reducers</h3><p>当 store 需要知道一个 action 触发后状态需要怎么改变时，他会去询问 reducer。根 reducer 会根据状态对象的键（key）将整个状态树进行拆分，然后将拆分后的每一块子状态传到知道该怎么对这块状态进行响应的子 reducer 那里处理。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*Vocy_6Gl9PbFlCIJsE9r3A.png\" alt=\"\"></p>\n<p>我把 reducers 看做是对复印情有独钟的白领们。他们不希望把任何事搞砸，因此他们不会修改任何传递给他们的文件。取而代之的是，他们会对这些文件进行复印，然后在复印件上进行修改。（译者注：当然，当这些修改后的复印件定稿后，他们也不会再去修改这些复印件。）</p>\n<p>这是 Redux 的核心思想之一。不直接修改整个应用的状态树，而是将状态树的每一部分进行拷贝并修改拷贝后的部分，然后将这些部分重新组合成一颗新的状态树。</p>\n<p>子 reducers 会把他们创建的副本传回给根 reducer，而根 reducer 会把这些副本组合起来形成一颗新的状态树。最后根 reducer 将新的状态树传回给 store，store 再将新的状态树设为最终的状态。</p>\n<p>如果你有一个小型应用，你可能只有一个 reducer 对整个状态树进行拷贝并作出修改。又或者你有一个超大的应用，你可能会有若干个 reducers 对整个状态树进行修改。这也是 Flux 和 Redux 的另一处区别。在 Flux 中，store 并不需要与其他 store 产生关联，而且 store 的结构是扁平的。而在 Redux 中，reducers 是有层级结构的。这种层级结构可以有若干层，就像组件的层级结构那样。</p>\n<h3 id=\"The-views-智能组件（smart-components）和木偶组件-dumb-components\"><a href=\"#The-views-智能组件（smart-components）和木偶组件-dumb-components\" class=\"headerlink\" title=\"The views: 智能组件（smart components）和木偶组件(dumb components)\"></a>The views: 智能组件（smart components）和木偶组件(dumb components)</h3><p>Flux 拥有控制型视图（controller views） 和常规型视图（regular views）。控制型视图就像是一个经理一样，管理着 store 和子视图（child views）之间的通信。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*TgCkFcjlD9SxSrMvVX3DrA.png\" alt=\"\"></p>\n<p>在 Redux 中，也有一个类似的概念：智能组件和木偶组件。（译者注：在最新的 Redux 文档中，它们分别叫做容器型组件 Container component 和展示型组件 Presentational component）智能组件的职责就像经理一样，但是比起 Flux 中的角色，Redux 对经理的职责有了更多的定义：</p>\n<ul>\n<li>智能组件负责所有的 action 相关的工作。如果智能组件里包含的一个木偶组件需要触发一个 action，智能组件会通过 props 传一个 function 给木偶组件，而木偶组件可以在需要触发 action 时调用这个 function。</li>\n<li>智能组件不定义 CSS 样式。</li>\n<li>智能组件几乎不会产生自己的 DOM 节点，他的工作是组织若干的木偶组件，由木偶组件来生成最终的 DOM 节点。</li>\n</ul>\n<p>木偶组件不会直接依赖 action（译者注：即不会在木偶组件里 <code>require</code> action 相关的文件），因为所有的 action 都会当做 props 传下来。这意味着木偶组件可以被任何一个逻辑不同的 App 拿去使用。同时木偶组件也需要有一定的样式来让自己变得好看一些（当然你可以让木偶组件接受某些 props 作为设置样式的变量）。</p>\n<h3 id=\"视图层绑定\"><a href=\"#视图层绑定\" class=\"headerlink\" title=\"视图层绑定\"></a>视图层绑定</h3><p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*D1RcVrMV2rp6AH9hk5xZ8g.png\" alt=\"\"></p>\n<p>要把 store 绑定到视图上，Redux 还需要一点帮助。如果你在使用 React，那么你需要使用 react-redux。</p>\n<p>视图绑定工作有点像为组件树服务的 IT 部门。IT 部门确保所有的组件都正确的绑定到 store 上，并处理各种技术上的细节，以确保余下层级的组件对绑定相关的操作毫无感知。</p>\n<p>视图层绑定引入了三个概念：</p>\n<ol>\n<li><code>&lt;Provider&gt;</code> 组件： 这个组件需要包裹在整个组件树的最外层。这个组件让根组件的所有子孙组件能够轻松的使用 <code>connect()</code> 方法绑定 store。</li>\n<li><code>connect()</code>：这是 <code>react-redux</code> 提供的一个方法。如果一个组件想要响应状态的变化，就把自己作为参数传给 connect() 的结果（译者注：connect() 返回的依然是一个函数），connect() 方法会处理与 store 绑定的细节，并通过 selector 确定该绑定 store 中哪一部分的数据。</li>\n<li><code>selector</code>：这是你自己编写的一个函数。这个函数声明了你的组件需要整个 store 中的哪一部分数据作为自己的 props。</li>\n</ol>\n<h3 id=\"根组件\"><a href=\"#根组件\" class=\"headerlink\" title=\"根组件\"></a>根组件</h3><p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1200/1*JXPeiNP-it60-QYKb-p2eQ.png\" alt=\"\"></p>\n<p>所有的 React 应用都存在一个根组件（root component）。他其实就是整个组件树最外层的那个组件，但是在 Redux 中，根组件还要承担额外的任务。</p>\n<p>根组件承担的角色有点像企业中的高管，他将整个团队整合到一起来完成某项任务。他会创建 store，并告诉 store 使用哪些 reducers，并最终完成视图层的绑定。</p>\n<p>当完成整个应用的初始化工作后，根组件的就不再插手整个应用的运行过程了。每一次重新渲染（re-render）都没有根组件什么事，这些活儿都由根组件下面的子组件完成，当然也少不了视图层绑定的功劳。</p>\n<h2 id=\"Redux-完成的运行流程\"><a href=\"#Redux-完成的运行流程\" class=\"headerlink\" title=\"Redux 完成的运行流程\"></a>Redux 完成的运行流程</h2><p>让我们看看上述各个部分是怎样组合成一个可以运行的应用的。</p>\n<h3 id=\"配置环节\"><a href=\"#配置环节\" class=\"headerlink\" title=\"配置环节\"></a>配置环节</h3><p>应用中的不同部分需要在配置环节中整合到一起。</p>\n<p>(1) <strong>准备好 store。</strong>根组件会创建 store，并通过 createStore(reducer) 方法告诉 store 该使用哪个根 reducer。与此同时，根 reducer 也通过 combineReducers() 方法组建了一只向自己汇报的 reducer 团队。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*8_fU31-jNQnQ0dp-wplm5w.png\" alt=\"\"></p>\n<p>(2) <strong>设置 store 和组件之间的通信。</strong>根组件将它所有的子组件包裹在 <code>&lt;Provider&gt;</code> 组件中，并建立了 Provider 与 store 之间的联系。</p>\n<p>Provider 本质上创建了一个用于更新视图组件的网络。那些智能组件通过 connect() 方法连入这个网络，以此确保他们能够获取到状态的更新。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*NYMutQLW8TcEgbO8VNeqHA.png\" alt=\"\"></p>\n<p>(3) <strong>准备好 action callback。</strong>为了让木偶组件更好的处理 action，智能组件可以用 <code>bindActionCreators()</code> 方法来创建 action callback。这样做之后，智能组件就能给木偶组件传入一个回调（callback）。对应的 action 会在木偶组件调用这个回调时被自动 dispatch。（译者注：使用 bindActionCreators() 使得木偶组件无需关心 action 的 type 等信息，只用调用 props 中的某个方法传入需要的参数作为 action 的 payload 即可）</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*aVoD3gGddKUy3VCxwylthQ.png\" alt=\"\"></p>\n<h3 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h3><p>现在我们的应用已经配置完成，用户可以开始操作了。让我们触发一个 action，看看数据是怎样流动的。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*GNDs7SY53lEhp7mX8V25lw.png\" alt=\"\"></p>\n<p>(1) 视图发出了一个 action，action creator 将这个 action 格式化并返回。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*p4EkWE_8upZ97Z0IapKDcQ.png\" alt=\"\"></p>\n<p>(2) 这个 action 要么被自动 dispatch（如果我们在配置阶段使用了 bindActionCreators()），要么由视图层手动 dispatch。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*zmFp3bmDq7b6Bvlo8Ineag.png\" alt=\"\"></p>\n<p>(3) store 接受到这个 action 后，将当前的状态树和这个 action 传给根 reducer。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*zrsSoAAyf4pqTMHiA6P8Ww.png\" alt=\"\"></p>\n<p>(4) 根 reducer 将整个状态树切分成一个个小块，然后将某一个小块分发给知道怎么处理这部分内容的子 reducer。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*-S_dYe6BoQBgwSRpF7Hriw.png\" alt=\"\"></p>\n<p>(5) 子 reducer 将传入的一小块状态树进行拷贝，然后在副本上进行修改，并最终将修改后的副本返回根 reducer。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*_R-rGNfKr2Xu2FlXNZNPJg.png\" alt=\"\"></p>\n<p>(6) 当所有的子 reducer 返回他们修改的副本之后，根 reducer 将这些部分再次组合起来形成一颗新的状态树。然后根 reducer 将这个新的状态树交还给 store，store 再把自己的状态置为这个最新的状态树。</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*bUMekI8QlEfFxSBCuVuIkw.png\" alt=\"\"></p>\n<p>(7) store 告诉视图层绑定：「状态更新啦」</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*x6vBvUlFJktJqty56jr0QQ.png\" alt=\"\"></p>\n<p>(8) 视图层绑定让 store 把更新的状态传过来</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*qGatznV4QujuxGe49YfX5A.png\" alt=\"\"></p>\n<p>(9) 视图层绑定触发了一个重新渲染的操作（re-render）</p>\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*Je2mow8mjYLngXreGGlIEg.png\" alt=\"\"></p>\n<p>这就是我所理解的 Redux，希望对你有所帮助。</p>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"http://rackt.org/redux/index.html\" target=\"_blank\" rel=\"external\">Redux 官方文档</a></li>\n<li><a href=\"https://github.com/camsong/redux-in-chinese\" target=\"_blank\" rel=\"external\">Redux 官方文档中文版</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31\" target=\"_blank\" rel=\"external\">The Evolution of Flux Frameworks</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\" target=\"_blank\" rel=\"external\">Smart and Dumb Components</a></li>\n<li><a href=\"http://stackoverflow.com/a/32920459\" target=\"_blank\" rel=\"external\">The upsides of using Redux</a></li>\n<li><a href=\"http://stackoverflow.com/a/32916602\" target=\"_blank\" rel=\"external\">The downsides of using Redux</a></li>\n<li><a href=\"https://www.zhihu.com/question/38591713/answer/77634014\" target=\"_blank\" rel=\"external\">如何评价数据流管理架构 Redux?</a></li>\n</ul>"},{"title":"string-function.md","date":"2017-09-22T01:58:05.000Z","_content":"\n### 操作方法\n\n##### 字符串截取sub,substing,slice\n\n- 一个参数\n\n```javascript\n var str = 'what are you doing?';\n //参数为正数\n str.sub(1);        //'hat are you doing?'\n str.substring(1);  //'hat are you doing?'\n str.slice(1);      //'hat are you doing?'\n //参数为负数\n str.sub(-1);       //'?'\n str.substring(-1); //'what are you doing?'\n str.slice(-1);     //'?'\n```\n> sub,slice支持参数为正数和负数(等价于字符串长度+负数)，\nsubstring只支持参数为正数，如果为负数会返回整个字符串\n\n<!-- more -->\n\n- 两个参数\n\n```javascript\nvar str = 'what are you doing?';\n// 两个参数都为正数\n str.substr(1,4);      //'hat '\n str.substring(1,4);   //'hat'\n str.slice(1,4);       //'hat'\n\n// 有负数参数\n str.substr(-5,4);  //'oing'\n str.substring(-5,4);//'what'\n str.slice(-5,4);    //''\n```\n\n> substr，第二个参数代表的是截取字符串的长度，第二个参数不能为负数;\nsubsting，参数为负数会自动转换为0，并且数值小的为起点。\nslice，第二个参数的数值小于第一个参数的数值返回空值。\n\n\n","source":"_posts/string-function.md","raw":"---\ntitle: 'string-function.md'\ndate: 2017-09-22 09:58:05\ntags: [javascript, string]\n---\n\n### 操作方法\n\n##### 字符串截取sub,substing,slice\n\n- 一个参数\n\n```javascript\n var str = 'what are you doing?';\n //参数为正数\n str.sub(1);        //'hat are you doing?'\n str.substring(1);  //'hat are you doing?'\n str.slice(1);      //'hat are you doing?'\n //参数为负数\n str.sub(-1);       //'?'\n str.substring(-1); //'what are you doing?'\n str.slice(-1);     //'?'\n```\n> sub,slice支持参数为正数和负数(等价于字符串长度+负数)，\nsubstring只支持参数为正数，如果为负数会返回整个字符串\n\n<!-- more -->\n\n- 两个参数\n\n```javascript\nvar str = 'what are you doing?';\n// 两个参数都为正数\n str.substr(1,4);      //'hat '\n str.substring(1,4);   //'hat'\n str.slice(1,4);       //'hat'\n\n// 有负数参数\n str.substr(-5,4);  //'oing'\n str.substring(-5,4);//'what'\n str.slice(-5,4);    //''\n```\n\n> substr，第二个参数代表的是截取字符串的长度，第二个参数不能为负数;\nsubsting，参数为负数会自动转换为0，并且数值小的为起点。\nslice，第二个参数的数值小于第一个参数的数值返回空值。\n\n\n","slug":"string-function","published":1,"updated":"2017-09-22T02:43:31.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7vadha4000ylk908yb7yg5z","content":"<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><h5 id=\"字符串截取sub-substing-slice\"><a href=\"#字符串截取sub-substing-slice\" class=\"headerlink\" title=\"字符串截取sub,substing,slice\"></a>字符串截取sub,substing,slice</h5><ul>\n<li>一个参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'what are you doing?'</span>;</div><div class=\"line\"><span class=\"comment\">//参数为正数</span></div><div class=\"line\">str.sub(<span class=\"number\">1</span>);        <span class=\"comment\">//'hat are you doing?'</span></div><div class=\"line\">str.substring(<span class=\"number\">1</span>);  <span class=\"comment\">//'hat are you doing?'</span></div><div class=\"line\">str.slice(<span class=\"number\">1</span>);      <span class=\"comment\">//'hat are you doing?'</span></div><div class=\"line\"><span class=\"comment\">//参数为负数</span></div><div class=\"line\">str.sub(<span class=\"number\">-1</span>);       <span class=\"comment\">//'?'</span></div><div class=\"line\">str.substring(<span class=\"number\">-1</span>); <span class=\"comment\">//'what are you doing?'</span></div><div class=\"line\">str.slice(<span class=\"number\">-1</span>);     <span class=\"comment\">//'?'</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>sub,slice支持参数为正数和负数(等价于字符串长度+负数)，<br>substring只支持参数为正数，如果为负数会返回整个字符串</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>两个参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'what are you doing?'</span>;</div><div class=\"line\"><span class=\"comment\">// 两个参数都为正数</span></div><div class=\"line\"> str.substr(<span class=\"number\">1</span>,<span class=\"number\">4</span>);      <span class=\"comment\">//'hat '</span></div><div class=\"line\"> str.substring(<span class=\"number\">1</span>,<span class=\"number\">4</span>);   <span class=\"comment\">//'hat'</span></div><div class=\"line\"> str.slice(<span class=\"number\">1</span>,<span class=\"number\">4</span>);       <span class=\"comment\">//'hat'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 有负数参数</span></div><div class=\"line\"> str.substr(<span class=\"number\">-5</span>,<span class=\"number\">4</span>);  <span class=\"comment\">//'oing'</span></div><div class=\"line\"> str.substring(<span class=\"number\">-5</span>,<span class=\"number\">4</span>);<span class=\"comment\">//'what'</span></div><div class=\"line\"> str.slice(<span class=\"number\">-5</span>,<span class=\"number\">4</span>);    <span class=\"comment\">//''</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>substr，第二个参数代表的是截取字符串的长度，第二个参数不能为负数;<br>substing，参数为负数会自动转换为0，并且数值小的为起点。<br>slice，第二个参数的数值小于第一个参数的数值返回空值。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><h5 id=\"字符串截取sub-substing-slice\"><a href=\"#字符串截取sub-substing-slice\" class=\"headerlink\" title=\"字符串截取sub,substing,slice\"></a>字符串截取sub,substing,slice</h5><ul>\n<li>一个参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'what are you doing?'</span>;</div><div class=\"line\"><span class=\"comment\">//参数为正数</span></div><div class=\"line\">str.sub(<span class=\"number\">1</span>);        <span class=\"comment\">//'hat are you doing?'</span></div><div class=\"line\">str.substring(<span class=\"number\">1</span>);  <span class=\"comment\">//'hat are you doing?'</span></div><div class=\"line\">str.slice(<span class=\"number\">1</span>);      <span class=\"comment\">//'hat are you doing?'</span></div><div class=\"line\"><span class=\"comment\">//参数为负数</span></div><div class=\"line\">str.sub(<span class=\"number\">-1</span>);       <span class=\"comment\">//'?'</span></div><div class=\"line\">str.substring(<span class=\"number\">-1</span>); <span class=\"comment\">//'what are you doing?'</span></div><div class=\"line\">str.slice(<span class=\"number\">-1</span>);     <span class=\"comment\">//'?'</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>sub,slice支持参数为正数和负数(等价于字符串长度+负数)，<br>substring只支持参数为正数，如果为负数会返回整个字符串</p>\n</blockquote>","more":"<ul>\n<li>两个参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'what are you doing?'</span>;</div><div class=\"line\"><span class=\"comment\">// 两个参数都为正数</span></div><div class=\"line\"> str.substr(<span class=\"number\">1</span>,<span class=\"number\">4</span>);      <span class=\"comment\">//'hat '</span></div><div class=\"line\"> str.substring(<span class=\"number\">1</span>,<span class=\"number\">4</span>);   <span class=\"comment\">//'hat'</span></div><div class=\"line\"> str.slice(<span class=\"number\">1</span>,<span class=\"number\">4</span>);       <span class=\"comment\">//'hat'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 有负数参数</span></div><div class=\"line\"> str.substr(<span class=\"number\">-5</span>,<span class=\"number\">4</span>);  <span class=\"comment\">//'oing'</span></div><div class=\"line\"> str.substring(<span class=\"number\">-5</span>,<span class=\"number\">4</span>);<span class=\"comment\">//'what'</span></div><div class=\"line\"> str.slice(<span class=\"number\">-5</span>,<span class=\"number\">4</span>);    <span class=\"comment\">//''</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>substr，第二个参数代表的是截取字符串的长度，第二个参数不能为负数;<br>substing，参数为负数会自动转换为0，并且数值小的为起点。<br>slice，第二个参数的数值小于第一个参数的数值返回空值。</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj7vadh7s0001lk90t2e2ykdd","tag_id":"cj7vadh7y0003lk90fkq1zlrc","_id":"cj7vadh8a000blk90nwhdwczr"},{"post_id":"cj7vadh7s0001lk90t2e2ykdd","tag_id":"cj7vadh860007lk90rfus81tv","_id":"cj7vadh8b000clk908zzburuv"},{"post_id":"cj7vadh7w0002lk90oziip1l4","tag_id":"cj7vadh8a000alk90cbdo8vob","_id":"cj7vadh8g000glk90key5v83m"},{"post_id":"cj7vadh7w0002lk90oziip1l4","tag_id":"cj7vadh8b000dlk90c9smkfp1","_id":"cj7vadh8h000hlk90nyr54vs0"},{"post_id":"cj7vadh7w0002lk90oziip1l4","tag_id":"cj7vadh8d000elk90ev05y605","_id":"cj7vadh8i000jlk90abr3dxrx"},{"post_id":"cj7vadh800004lk90c10yohwd","tag_id":"cj7vadh8a000alk90cbdo8vob","_id":"cj7vadh8k000llk90briu84jh"},{"post_id":"cj7vadh800004lk90c10yohwd","tag_id":"cj7vadh8h000ilk90m41kzmdb","_id":"cj7vadh8k000mlk90fb627she"},{"post_id":"cj7vadh820005lk90d344xj29","tag_id":"cj7vadh8a000alk90cbdo8vob","_id":"cj7vadh8l000olk90u5sx3uf4"},{"post_id":"cj7vadh870008lk904vudayev","tag_id":"cj7vadh8a000alk90cbdo8vob","_id":"cj7vadh8o000slk900fg6l4vk"},{"post_id":"cj7vadh870008lk904vudayev","tag_id":"cj7vadh8m000plk903w8r5tpu","_id":"cj7vadh8o000tlk907d9g9tcg"},{"post_id":"cj7vadh870008lk904vudayev","tag_id":"cj7vadh8m000qlk90e1cy64mf","_id":"cj7vadh8p000vlk9032zygeqf"},{"post_id":"cj7vadh890009lk90e5wi1u4e","tag_id":"cj7vadh8a000alk90cbdo8vob","_id":"cj7vadh8q000wlk900dhup8mn"},{"post_id":"cj7vadh890009lk90e5wi1u4e","tag_id":"cj7vadh8p000ulk90pgqqkrj0","_id":"cj7vadh8r000xlk906lojwdrb"},{"post_id":"cj7vadha4000ylk908yb7yg5z","tag_id":"cj7vadh8a000alk90cbdo8vob","_id":"cj7vadha60010lk90zn54s771"},{"post_id":"cj7vadha4000ylk908yb7yg5z","tag_id":"cj7vadha5000zlk90udi8rn5f","_id":"cj7vadha60011lk90u78iaytc"}],"Tag":[{"name":"html5","_id":"cj7vadh7y0003lk90fkq1zlrc"},{"name":"contenteditable","_id":"cj7vadh860007lk90rfus81tv"},{"name":"javascript","_id":"cj7vadh8a000alk90cbdo8vob"},{"name":"ueditor","_id":"cj7vadh8b000dlk90c9smkfp1"},{"name":"富文本编辑器","_id":"cj7vadh8d000elk90ev05y605"},{"name":"react-native","_id":"cj7vadh8h000ilk90m41kzmdb"},{"name":"object","_id":"cj7vadh8m000plk903w8r5tpu"},{"name":"location","_id":"cj7vadh8m000qlk90e1cy64mf"},{"name":"redux","_id":"cj7vadh8p000ulk90pgqqkrj0"},{"name":"string","_id":"cj7vadha5000zlk90udi8rn5f"}]}}