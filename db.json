{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1493964827876},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1493964827877},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1493964827896},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1493964827898},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1493964827898},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1493964827899},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1493964827899},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1493964827899},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1493964827900},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1493964827901},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1493964827902},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1493964827903},{"_id":"themes/next/_config.yml","hash":"48eace7e6673f854ab1950741c61337b79f2e04a","modified":1494311192525},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1493964827904},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1493964827901},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1493964828078},{"_id":"source/_posts/Object.md","hash":"20531a33477d8a09428aae592a42acc72d8ad587","modified":1494316136862},{"_id":"source/_posts/add-hello-world.md","hash":"c268e623d33ca0b51297fea62681f86b8725d24a","modified":1494315953105},{"_id":"source/_posts/Location-Object.md","hash":"eb59afbceec2c7284615617c307918907e83a05d","modified":1494316321274},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1494222736686},{"_id":"source/_posts/first-commit.md","hash":"933f8dfd9e06db3286f629ce420421d9c0ee92c9","modified":1494315953106},{"_id":"source/_posts/函数表达式.md","hash":"4d778937f193001177440f56e7652b42b2b345d4","modified":1494316339645},{"_id":"source/_posts/终于成功了.md","hash":"a6b0d5d5374f6d3a6ce20988f705a6134415ab09","modified":1494315953107},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1493964827859},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1493964827867},{"_id":"themes/next/.git/index","hash":"d272e5b086213932ec34c8d2b90619d3a7ddd60f","modified":1494311118751},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1493964792343},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1493964827897},{"_id":"themes/next/.git/packed-refs","hash":"ea7ad1124ad5d270ea6886ed9bc1735a307e10c7","modified":1493964827851},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1493964827905},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1493964827905},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1493964827906},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1493964827906},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1493964827907},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1493964827908},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1493964827908},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1493964827909},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1493964827911},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1493964827911},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1493964827910},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1493964827912},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1493964827898},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1493964827913},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1493964828075},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1493964828075},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1493964828076},{"_id":"themes/next/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1493964828076},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1493964827911},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1493964828077},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1493964828077},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1493964828080},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1493964828079},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1493964828077},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1493964828238},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1493964828237},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1493964828237},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828140},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1493964792402},{"_id":"themes/next/.git/logs/HEAD","hash":"bb4c52fb5c46813fb21fb39ce7207a07c71f0f77","modified":1493964827863},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1493964792346},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1493964792345},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1493964792397},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1493964792399},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1493964792398},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1493964792399},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1493964792400},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1493964792401},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1493964792401},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1493964792400},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493964827913},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493964827913},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1493964827914},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1493964827914},{"_id":"themes/next/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1493964827915},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1493964828031},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1493964828033},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1493964828032},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1493964828033},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1493964828034},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1493964828035},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1493964828038},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1493964828038},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1493964828039},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1493964828039},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1493964828047},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1493964828048},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1493964828052},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1493964828067},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1493964828067},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1493964828068},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1493964828069},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1493964828069},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1493964828081},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1493964828082},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1493964828081},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1493964828082},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1493964828083},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1493964828083},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1493964828139},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1493964828141},{"_id":"themes/next/source/images/alipay.png","hash":"fd4a0cf9c1fdbfa12d2f1459c53e0c48e5d4e590","modified":1494310693437},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1493964828141},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1493964828141},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1493964828143},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1493964828144},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1493964828145},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1493964828144},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1493964828145},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1493964828147},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493964828146},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1493964828145},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1493964828147},{"_id":"themes/next/source/images/wechatpay.png","hash":"2f6448b3bf1aa783cce80dae9007ebc3584484d0","modified":1494310670924},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493964828146},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1493964828147},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828050},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828050},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828121},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828120},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828122},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828135},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493964828137},{"_id":"themes/next/.git/refs/heads/master","hash":"a0d23dcebcf453c784363ae5568d6ae419497a81","modified":1493964827862},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1493964828036},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1493964828037},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1493964828041},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1493964828041},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1493964828043},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1493964828044},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1493964828042},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1493964828046},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1493964828040},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1493964828049},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1493964828051},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1493964828061},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1493964828062},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1493964828060},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1493964828061},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1493964828064},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1493964828063},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1493964828063},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1493964828064},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1493964828053},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1493964828054},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1493964828055},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1493964828056},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1493964828057},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1493964828058},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1493964828056},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1493964828058},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1493964828057},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1493964828059},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1493964828059},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1493964828071},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1493964828072},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1493964828073},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1493964828074},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1493964828120},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1493964828121},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1493964828122},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1493964828135},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1493964828136},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1493964828137},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1493964828148},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1493964828149},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1493964828149},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1493964828149},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1493964828150},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1493964828151},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1493964828151},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1493964828153},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1493964828153},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1493964828154},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1493964828152},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1493964828171},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1493964828165},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1493964828172},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1493964828172},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1493964828173},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1493964828185},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1493964828187},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1493964828188},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1493964828186},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1493964828213},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1493964828215},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1493964828215},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1493964828216},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1493964828217},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1493964828218},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1493964828218},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1493964828190},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1493964828191},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1493964828192},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1493964828192},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1493964828193},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1493964828221},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1493964828219},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1493964828220},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1493964828229},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1493964828229},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1493964828235},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1493964828235},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1493964828236},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1493964828214},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"bb4c52fb5c46813fb21fb39ce7207a07c71f0f77","modified":1493964827864},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1493964827857},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1493964828071},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1493964828070},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1493964828085},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1493964828087},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1493964828085},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1493964828088},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1493964828087},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1493964828097},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1493964828118},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1493964828117},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1493964828118},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1493964828117},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1493964828119},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1493964828108},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1493964828116},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1493964828123},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1493964828124},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1493964828124},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1493964828125},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493964828126},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1493964828126},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1493964828127},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1493964828132},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1493964828132},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1493964828133},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1493964828132},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1493964828129},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1493964828129},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1493964828134},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1493964828129},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493964828130},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1493964828130},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1493964828134},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1493964828152},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1493964828162},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1493964828164},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493964828173},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493964828174},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493964828174},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493964828175},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493964828176},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493964828177},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1493964828184},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1493964828183},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1493964828189},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1493964828189},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1493964828181},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1493964828194},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1493964828194},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1493964828196},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1493964828228},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1493964828228},{"_id":"themes/next/.git/objects/pack/pack-62303accec2bf8df947bf654fee2a2192f7d3530.idx","hash":"3a15219d9e27320dd176ac422451cf11c74bb4a4","modified":1493964827442},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1493964828159},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1493964828161},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1493964828211},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1493964828212},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1493964828233},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"bb4c52fb5c46813fb21fb39ce7207a07c71f0f77","modified":1493964827857},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1493964828089},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1493964828089},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1493964828091},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1493964828091},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1493964828095},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1493964828095},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1493964828090},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1493964828096},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1493964828097},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1493964828093},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1493964828093},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1493964828094},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1493964828098},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1493964828098},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1493964828099},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1493964828100},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1493964828100},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1493964828100},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1493964828101},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1493964828099},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1493964828102},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1493964828102},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1493964828102},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1493964828103},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1493964828103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1493964828103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1493964828105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1493964828105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1493964828106},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1493964828101},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1493964828107},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1493964828107},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1493964828109},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1493964828109},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1493964828108},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1493964828110},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1493964828108},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1493964828111},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1493964828111},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1493964828106},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1493964828112},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1493964828113},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1493964828114},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1493964828114},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1493964828115},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1493964828115},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1493964828114},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1493964828112},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1493964828088},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493964828128},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1493964828127},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493964828131},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1493964828155},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1493964828156},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1493964828156},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1493964828158},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1493964828115},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1493964828179},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1493964828180},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493964828177},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1493964828181},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1493964828180},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1493964828201},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1493964828198},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1493964828210},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1493964828178},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1493964828095},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1493964828170},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1493964828226},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1493964828207},{"_id":"themes/next/.git/objects/pack/pack-62303accec2bf8df947bf654fee2a2192f7d3530.pack","hash":"5fa4aeffe45866d053e6d431320661f39648c85c","modified":1493964827652},{"_id":"public/2017/05/08/终于成功了/index.html","hash":"77df3894e104dca875b932aff07dd0bfae5fadd0","modified":1494316458139},{"_id":"public/2017/05/08/first-commit/index.html","hash":"a9773658349d1d7cc99b7247db782ac92597398a","modified":1494316458140},{"_id":"public/2017/05/08/add-hello-world/index.html","hash":"9c0a4b8e33a7bff5aa0d96cfe57681308b0a8415","modified":1494316458141},{"_id":"public/2017/05/08/hello-world/index.html","hash":"9af8ae479f974d4d5cd537b7909be585f03b3064","modified":1494316458141},{"_id":"public/archives/index.html","hash":"ed34d9f3b25be7b4a35b717924bddef8ddd7be89","modified":1494316458141},{"_id":"public/archives/2017/index.html","hash":"7e95f757360f18a61f6b05bf5094ddfd56e25258","modified":1494316458141},{"_id":"public/archives/2017/05/index.html","hash":"725db1f2ec0117d827ccfb60d8fa9ecc6760bee0","modified":1494316458141},{"_id":"public/2017/05/09/函数表达式/index.html","hash":"e1ad07c7e55ea8c279fc5a12d618aa43ef78c899","modified":1494316458141},{"_id":"public/index.html","hash":"3a5ac7ab927473dbbfe0ef1052deea159bb7b2ea","modified":1494316458141},{"_id":"public/tags/javascript/index.html","hash":"24ac4f62d86d6233cd5c037555ba11a4e1d17999","modified":1494316458142},{"_id":"public/2017/05/09/Location-Object/index.html","hash":"ebbe0e880e7a7892d3795513192bd51a2887956e","modified":1494316458142}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Location-Object","date":"2017-05-09T07:49:34.000Z","_content":"\n- 它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。\n- `location`对象很特别，它既是`window`对象的属性，又是`document`对象的属性。\n```\nwindow.location === document.location  //true\n```\n- location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。\n\n<!-- more -->\n\n> 属性\n\n属性名 | 例子 | 说明\n---|--- | ---\nhash | \"#contents\" | 返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串\nhost | \"www.qxy.com:80\" | 返回服务器名称和端口号（如果有）\nhostname | \"www.qxy.com\" | 返回不带端口号的服务器名称\nhref | \"http://www.qxy.com\" | 返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值\npathname | \"/blog/\" | 返回URL中的目录和（或）文件名\nport | \"8080\" | 返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串\nprotocol | \"http:\" | 返回页面使用的协议。通常是http:或https:\nsearch | \"?q=javascript\" | 返回URL的查询字符串。这个字符串以问号开头\n\n#### 查询字符串参数\n\n虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符\n串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个\n访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返\n回包含所有参数的一个对象：\n```\nfunction getQueryStringArgs(){\n    //取得查询字符串并去掉开头的问号\n    var qs = (location.search.length > 0 ? location.search.substring(1) : \"\" ),\n        //保存数据的对象\n        args = {},\n        //取得每一项\n        items = qs.length ? qs.split('&') : [],\n        item = null,\n        name = null,\n        value = null,\n        //在for循环中使用\n        i = 0,\n        len = items.length;\n        \n    //逐个将每一项添加到args对象中\n    \n    for(i = 0;i < len; i++){\n        item = items[i].split(':');\n        name = decodeURIComponent(item[0]);\n        value = decodeURIComponent(item[1]);\n        \n        if(name.length){\n            args[name] = value;\n        }\n    }\n    return args;\n}\n```\n\n#### 位置操作\n\n使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用\nassign()方法并为其传递一个URL，如下所示。\n```\nlocation.assign(\"http://www.qxy.com\");\n```\n\n这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将`location.href`\n或`window.location` 设置为一个URL 值，也会以该值调用`assign()`方法。例如，下列两行代码与\n显式调用`assign()`方法的效果完全一样。\n```\nwindow.location = \"http://www.wrox.com\";\nlocation.href = \"http://www.wrox.com\";\n```\n在这些改变浏览器位置的方法中，最常用的是设置`location.href `属性。\n\n修改location 对象的其他属性也可以改变当前加载的页面\n```\n//假设初始URL 为http://www.wrox.com/WileyCDA/\n//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"\nlocation.hash = \"#section1\";\n//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"\nlocation.search = \"?q=javascript\";\n//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"\nlocation.hostname = \"www.yahoo.com\";\n//将URL 修改为\"http://www.yahoo.com/mydir/\"\nlocation.pathname = \"mydir\";\n//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"\nlocation.port = 8080;\n```\n每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。\n> 在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览\n器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后\n退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。\n\n> replace()方法。这个方法\n只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记\n录。在调用replace()方法之后，用户不能回到前一个页面\n```\nsetTimeout(function () {\nlocation.replace(\"http://www.wrox.com/\");\n}, 1000);\n```\n\n> reload()，作用是重新加载当前显示的页面\n\n如果调用reload()\n时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改\n变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法\n传递参数true。\n```\nlocation.reload(); //重新加载（有可能从缓存中加载）\nlocation.reload(true); //重新加载（从服务器重新加载）\n```\n位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。\n为此，最好将reload()放在代码的最后一行。","source":"_posts/Location-Object.md","raw":"---\ntitle: Location-Object\ndate: 2017-05-09 15:49:34\ntags: javascript\n---\n\n- 它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。\n- `location`对象很特别，它既是`window`对象的属性，又是`document`对象的属性。\n```\nwindow.location === document.location  //true\n```\n- location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。\n\n<!-- more -->\n\n> 属性\n\n属性名 | 例子 | 说明\n---|--- | ---\nhash | \"#contents\" | 返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串\nhost | \"www.qxy.com:80\" | 返回服务器名称和端口号（如果有）\nhostname | \"www.qxy.com\" | 返回不带端口号的服务器名称\nhref | \"http://www.qxy.com\" | 返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值\npathname | \"/blog/\" | 返回URL中的目录和（或）文件名\nport | \"8080\" | 返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串\nprotocol | \"http:\" | 返回页面使用的协议。通常是http:或https:\nsearch | \"?q=javascript\" | 返回URL的查询字符串。这个字符串以问号开头\n\n#### 查询字符串参数\n\n虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符\n串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个\n访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返\n回包含所有参数的一个对象：\n```\nfunction getQueryStringArgs(){\n    //取得查询字符串并去掉开头的问号\n    var qs = (location.search.length > 0 ? location.search.substring(1) : \"\" ),\n        //保存数据的对象\n        args = {},\n        //取得每一项\n        items = qs.length ? qs.split('&') : [],\n        item = null,\n        name = null,\n        value = null,\n        //在for循环中使用\n        i = 0,\n        len = items.length;\n        \n    //逐个将每一项添加到args对象中\n    \n    for(i = 0;i < len; i++){\n        item = items[i].split(':');\n        name = decodeURIComponent(item[0]);\n        value = decodeURIComponent(item[1]);\n        \n        if(name.length){\n            args[name] = value;\n        }\n    }\n    return args;\n}\n```\n\n#### 位置操作\n\n使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用\nassign()方法并为其传递一个URL，如下所示。\n```\nlocation.assign(\"http://www.qxy.com\");\n```\n\n这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将`location.href`\n或`window.location` 设置为一个URL 值，也会以该值调用`assign()`方法。例如，下列两行代码与\n显式调用`assign()`方法的效果完全一样。\n```\nwindow.location = \"http://www.wrox.com\";\nlocation.href = \"http://www.wrox.com\";\n```\n在这些改变浏览器位置的方法中，最常用的是设置`location.href `属性。\n\n修改location 对象的其他属性也可以改变当前加载的页面\n```\n//假设初始URL 为http://www.wrox.com/WileyCDA/\n//将URL 修改为\"http://www.wrox.com/WileyCDA/#section1\"\nlocation.hash = \"#section1\";\n//将URL 修改为\"http://www.wrox.com/WileyCDA/?q=javascript\"\nlocation.search = \"?q=javascript\";\n//将URL 修改为\"http://www.yahoo.com/WileyCDA/\"\nlocation.hostname = \"www.yahoo.com\";\n//将URL 修改为\"http://www.yahoo.com/mydir/\"\nlocation.pathname = \"mydir\";\n//将URL 修改为\"http://www.yahoo.com:8080/WileyCDA/\"\nlocation.port = 8080;\n```\n每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。\n> 在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览\n器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后\n退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。\n\n> replace()方法。这个方法\n只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记\n录。在调用replace()方法之后，用户不能回到前一个页面\n```\nsetTimeout(function () {\nlocation.replace(\"http://www.wrox.com/\");\n}, 1000);\n```\n\n> reload()，作用是重新加载当前显示的页面\n\n如果调用reload()\n时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改\n变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法\n传递参数true。\n```\nlocation.reload(); //重新加载（有可能从缓存中加载）\nlocation.reload(true); //重新加载（从服务器重新加载）\n```\n位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。\n为此，最好将reload()放在代码的最后一行。","slug":"Location-Object","published":1,"updated":"2017-05-09T07:52:01.274Z","_id":"cj2h9ae4u0001mo90au7bmk17","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。</li>\n<li><p><code>location</code>对象很特别，它既是<code>window</code>对象的属性，又是<code>document</code>对象的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location === document.location  //true</div></pre></td></tr></table></figure>\n</li>\n<li><p>location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>“#contents”</td>\n<td>返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串</td>\n</tr>\n<tr>\n<td>host</td>\n<td>“www.qxy.com:80”</td>\n<td>返回服务器名称和端口号（如果有）</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>“www.qxy.com”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td>“<a href=\"http://www.qxy.com\" target=\"_blank\" rel=\"external\">http://www.qxy.com</a>“</td>\n<td>返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>“/blog/“</td>\n<td>返回URL中的目录和（或）文件名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>“8080”</td>\n<td>返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>“http:”</td>\n<td>返回页面使用的协议。通常是http:或https:</td>\n</tr>\n<tr>\n<td>search</td>\n<td>“?q=javascript”</td>\n<td>返回URL的查询字符串。这个字符串以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h4><p>虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符<br>串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个<br>访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返<br>回包含所有参数的一个对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getQueryStringArgs()&#123;</div><div class=\"line\">    //取得查询字符串并去掉开头的问号</div><div class=\"line\">    var qs = (location.search.length &gt; 0 ? location.search.substring(1) : &quot;&quot; ),</div><div class=\"line\">        //保存数据的对象</div><div class=\"line\">        args = &#123;&#125;,</div><div class=\"line\">        //取得每一项</div><div class=\"line\">        items = qs.length ? qs.split(&apos;&amp;&apos;) : [],</div><div class=\"line\">        item = null,</div><div class=\"line\">        name = null,</div><div class=\"line\">        value = null,</div><div class=\"line\">        //在for循环中使用</div><div class=\"line\">        i = 0,</div><div class=\"line\">        len = items.length;</div><div class=\"line\">        </div><div class=\"line\">    //逐个将每一项添加到args对象中</div><div class=\"line\">    </div><div class=\"line\">    for(i = 0;i &lt; len; i++)&#123;</div><div class=\"line\">        item = items[i].split(&apos;:&apos;);</div><div class=\"line\">        name = decodeURIComponent(item[0]);</div><div class=\"line\">        value = decodeURIComponent(item[1]);</div><div class=\"line\">        </div><div class=\"line\">        if(name.length)&#123;</div><div class=\"line\">            args[name] = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return args;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h4><p>使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用<br>assign()方法并为其传递一个URL，如下所示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.assign(&quot;http://www.qxy.com&quot;);</div></pre></td></tr></table></figure></p>\n<p>这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将<code>location.href</code><br>或<code>window.location</code> 设置为一个URL 值，也会以该值调用<code>assign()</code>方法。例如，下列两行代码与<br>显式调用<code>assign()</code>方法的效果完全一样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location = &quot;http://www.wrox.com&quot;;</div><div class=\"line\">location.href = &quot;http://www.wrox.com&quot;;</div></pre></td></tr></table></figure></p>\n<p>在这些改变浏览器位置的方法中，最常用的是设置<code>location.href</code>属性。</p>\n<p>修改location 对象的其他属性也可以改变当前加载的页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//假设初始URL 为http://www.wrox.com/WileyCDA/</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/#section1&quot;</div><div class=\"line\">location.hash = &quot;#section1&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/?q=javascript&quot;</div><div class=\"line\">location.search = &quot;?q=javascript&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/WileyCDA/&quot;</div><div class=\"line\">location.hostname = &quot;www.yahoo.com&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/mydir/&quot;</div><div class=\"line\">location.pathname = &quot;mydir&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com:8080/WileyCDA/&quot;</div><div class=\"line\">location.port = 8080;</div></pre></td></tr></table></figure></p>\n<p>每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。</p>\n<blockquote>\n<p>在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览<br>器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后<br>退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。</p>\n<p>replace()方法。这个方法<br>只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记<br>录。在调用replace()方法之后，用户不能回到前一个页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">location.replace(&quot;http://www.wrox.com/&quot;);</div><div class=\"line\">&#125;, 1000);</div></pre></td></tr></table></figure></p>\n<p>reload()，作用是重新加载当前显示的页面</p>\n</blockquote>\n<p>如果调用reload()<br>时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改<br>变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法<br>传递参数true。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.reload(); //重新加载（有可能从缓存中加载）</div><div class=\"line\">location.reload(true); //重新加载（从服务器重新加载）</div></pre></td></tr></table></figure></p>\n<p>位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。<br>为此，最好将reload()放在代码的最后一行。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。</li>\n<li><p><code>location</code>对象很特别，它既是<code>window</code>对象的属性，又是<code>document</code>对象的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location === document.location  //true</div></pre></td></tr></table></figure>\n</li>\n<li><p>location对象的用处不只表现在它保存当前文档和信息，还表现在它将URL解析为独立的片段。</p>\n</li>\n</ul>","more":"<blockquote>\n<p>属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>“#contents”</td>\n<td>返回URL中hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串</td>\n</tr>\n<tr>\n<td>host</td>\n<td>“www.qxy.com:80”</td>\n<td>返回服务器名称和端口号（如果有）</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>“www.qxy.com”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td>“<a href=\"http://www.qxy.com\" target=\"_blank\" rel=\"external\">http://www.qxy.com</a>“</td>\n<td>返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>“/blog/“</td>\n<td>返回URL中的目录和（或）文件名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>“8080”</td>\n<td>返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>“http:”</td>\n<td>返回页面使用的协议。通常是http:或https:</td>\n</tr>\n<tr>\n<td>search</td>\n<td>“?q=javascript”</td>\n<td>返回URL的查询字符串。这个字符串以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h4><p>虽然通过上面的属性可以访问到location 对象的大多数信息，但其中访问URL 包含的查询字符<br>串的属性并不方便。尽管location.search 返回从问号到URL 末尾的所有内容，但却没有办法逐个<br>访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返<br>回包含所有参数的一个对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getQueryStringArgs()&#123;</div><div class=\"line\">    //取得查询字符串并去掉开头的问号</div><div class=\"line\">    var qs = (location.search.length &gt; 0 ? location.search.substring(1) : &quot;&quot; ),</div><div class=\"line\">        //保存数据的对象</div><div class=\"line\">        args = &#123;&#125;,</div><div class=\"line\">        //取得每一项</div><div class=\"line\">        items = qs.length ? qs.split(&apos;&amp;&apos;) : [],</div><div class=\"line\">        item = null,</div><div class=\"line\">        name = null,</div><div class=\"line\">        value = null,</div><div class=\"line\">        //在for循环中使用</div><div class=\"line\">        i = 0,</div><div class=\"line\">        len = items.length;</div><div class=\"line\">        </div><div class=\"line\">    //逐个将每一项添加到args对象中</div><div class=\"line\">    </div><div class=\"line\">    for(i = 0;i &lt; len; i++)&#123;</div><div class=\"line\">        item = items[i].split(&apos;:&apos;);</div><div class=\"line\">        name = decodeURIComponent(item[0]);</div><div class=\"line\">        value = decodeURIComponent(item[1]);</div><div class=\"line\">        </div><div class=\"line\">        if(name.length)&#123;</div><div class=\"line\">            args[name] = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return args;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h4><p>使用location 对象可以通过很多方式来改变浏览器的位置。首先，也是最常用的方式，就是使用<br>assign()方法并为其传递一个URL，如下所示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.assign(&quot;http://www.qxy.com&quot;);</div></pre></td></tr></table></figure></p>\n<p>这样，就可以立即打开新URL 并在浏览器的历史记录中生成一条记录。如果是将<code>location.href</code><br>或<code>window.location</code> 设置为一个URL 值，也会以该值调用<code>assign()</code>方法。例如，下列两行代码与<br>显式调用<code>assign()</code>方法的效果完全一样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location = &quot;http://www.wrox.com&quot;;</div><div class=\"line\">location.href = &quot;http://www.wrox.com&quot;;</div></pre></td></tr></table></figure></p>\n<p>在这些改变浏览器位置的方法中，最常用的是设置<code>location.href</code>属性。</p>\n<p>修改location 对象的其他属性也可以改变当前加载的页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//假设初始URL 为http://www.wrox.com/WileyCDA/</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/#section1&quot;</div><div class=\"line\">location.hash = &quot;#section1&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.wrox.com/WileyCDA/?q=javascript&quot;</div><div class=\"line\">location.search = &quot;?q=javascript&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/WileyCDA/&quot;</div><div class=\"line\">location.hostname = &quot;www.yahoo.com&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com/mydir/&quot;</div><div class=\"line\">location.pathname = &quot;mydir&quot;;</div><div class=\"line\">//将URL 修改为&quot;http://www.yahoo.com:8080/WileyCDA/&quot;</div><div class=\"line\">location.port = 8080;</div></pre></td></tr></table></figure></p>\n<p>每次修改location 的属性（hash 除外），页面都会以新URL 重新加载。</p>\n<blockquote>\n<p>在IE8、Firefox 1、Safari 2+、Opera 9+和Chrome 中，修改hash 的值会在浏览<br>器的历史记录中生成一条新记录。在IE 的早期版本中，hash 属性不会在用户单击“后<br>退”和“前进”按钮时被更新，而只会在用户单击包含hash 的URL 时才会被更新。</p>\n<p>replace()方法。这个方法<br>只接受一个参数，即要导航到的URL；结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记<br>录。在调用replace()方法之后，用户不能回到前一个页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">location.replace(&quot;http://www.wrox.com/&quot;);</div><div class=\"line\">&#125;, 1000);</div></pre></td></tr></table></figure></p>\n<p>reload()，作用是重新加载当前显示的页面</p>\n</blockquote>\n<p>如果调用reload()<br>时不传递任何参数，页面就会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改<br>变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要像下面这样为该方法<br>传递参数true。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.reload(); //重新加载（有可能从缓存中加载）</div><div class=\"line\">location.reload(true); //重新加载（从服务器重新加载）</div></pre></td></tr></table></figure></p>\n<p>位于reload()调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。<br>为此，最好将reload()放在代码的最后一行。</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-08T05:52:16.681Z","updated":"2017-05-08T05:52:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2h9ae4y0002mo90qp03cvzt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"first-commit","date":"2017-05-08T14:21:06.000Z","_content":"欢迎来到~~","source":"_posts/first-commit.md","raw":"---\ntitle: first-commit\ndate: 2017-05-08 22:21:06\ntags:\n---\n欢迎来到~~","slug":"first-commit","published":1,"updated":"2017-05-09T07:45:53.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2h9ae570004mo909k01l0fk","content":"<p>欢迎来到~~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎来到~~</p>\n"},{"title":"函数表达式","date":"2017-05-09T06:31:41.000Z","_content":"\n## 函数表达式\n\n1. 函数声明\n> 函数声明语法\n\n```javascript\nfunction funName(){\n    //函数体\n}\n```\nfunction是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。\n```javascript\nconsole.log(funName.name); //funName可以使用arguments.callee自调用\n\n```\n<!-- more -->\n> 重要的特性\n\n函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，\n意味着，**可以把函数声明放在调用它的语句后面**\n\n```javascript\nabc();  //\"1\"\nfunction abc(){\n    console.log('1');\n}\n```\n上述代码能够正常执行\n\n2. 函数表达式\n\n> 函数声明的几种形式\n- 最常见的一种形式\n```javascript\nvar funcName = function(){\n    //函数体\n}\n```\n\n创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为**匿名函数(anonymous function)**，因为function后面没有标识符。\n> 匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。\n\n函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。\n```javascript\nabc();\nvar abc = function(){\n    console.log(\"1\");\n}\n//报错：Uncaught TypeError: abc is not a function\n```\n\n理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：\n> 思考题\n```javascript\n//不要这么做\nif(isOk){\n    function sayHello(){\n        console.log('hello');\n    }\n}else{\n    function sayHello(){\n        console.log('world');\n    }\n}\n```\n结果是什么？\n> 从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义    \n实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。    \n但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，    \n因此使用这种方式很危险\n\n使用函数表达式就不会有这种问题\n```javascript\n//可以这样做\nvar sayHello;\nif(isOk){\n    sayHello = function(){\n        alert('hello');\n    }\n}else{\n    sayHello = function(){\n        alert('world!');\n    }\n}\n```\n能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。\n\n\n#### 7.1 递归\n> 递归函数是在一个函数通过名字调用自身的情况下构成的\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * count(num-1);\n    }\n}\n```\n> 上述代码是经典的阶乘函数    \n虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错\n\n```javascript\nvar anotherCount = count;\ncount = null;\nalert(anotherCount(4))  // 报错:count is not a function\n```\n>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。    \n但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错\"count is not a function\"\n\n> 在这种情况下，使用arguments.callee可以解决这个问题    \narguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * arguments.callee(num-1);\n    }\n}\n```\n\n通过使用`arguments.callee`代替函数名，可以确保无论怎么样调用函数都不会出问题，    \n因此，在编写函数递归调用时，使用`arguments.callee`总比使用函数名更保险。\n\n> 不过在严格模式下，\"严格模式\"（strict mode）不能通过脚本访问`arguments.callee`，访问这个属性将会报错。    \n不过可以使用命名函数表达式来达成相同的结果。\n\n```javascript\n'strict mode'   //严格模式\nvar count = (function f(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * f(num-1);\n    }\n});\n```\n>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量   \n函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。\n\n#### 7.2 闭包\n###### 概念\n> 闭包是指有权访问另一个函数作用域中的变量的函数\n创建闭包最常见的方式，就是在一个函数内部创建另一个函数。\n\n为什么还能够访问内部变量？\n>  是因为内部函数的作用域中包含父函数的作用域。\n\n###### 作用域链\n> 当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。   \n-->   \n然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。   \n-->   \n但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，...     \n直至作为作用域链终点的全局执行环境。   \n\n> 在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。\n```javascript\nfunction compare(value1, value2){\n    if(value1 < value2){\n        return -1;\n    } else if(value1 > value2){\n        return 1;\n    } else {\n        return 0;\n    }\n}\n```\n上述代码：\n1. 定义compare()函数\n2. 在全局作用域中调用它\n3. 当调用compare()时，会创建一个包含arguments,value1,value2的活动对象\n4. 全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。\n\n\ncompare()函数执行时的作用域链关系图\n\n![图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1489995952212&di=de4fccb3e1965772e5ac835604c69019&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg)\n\n后台每个执行环境都有一个表示变量的对象----**变量对象**。   \n**全局环境**的变量对象始终存在，而像`compare()`函数这样的**局部环境**的变量对象   \n则只在*函数执行*的过程中存在。\n\n- 在创建`compare()`函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的`[[Scope]]`属性中\n- 当调用`compare()`函数时，会为函数创建一个*执行环境*，然后通过复制函数的`[[Scope]]`属性中的对象构建起执行环境的作用域链接。\n- 此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端\n\n> 对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：\n1. 本地变量对象\n2. 全局变量对象\n> 作用域链*本质上*是一个指向*变量对象*的*指针列表*，它只包含**引用**但不实际包含**对象**。\n\n在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。   \n一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）   \n但是，***闭包***的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁\n\n> [注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。\n\n```javascript\n//创建函数\nvar compareNames = createComparisonFunction(\"name\");\n//调用函数\nvar result = compareNames({name:\"Nicholas\"},{name:\"Greg\"});\n//解除对匿名函数的引用(以便释放内存)\ncompareNames = null;\n/*首先，创建的比较函数被保存在变量compareNames中，\n而通过将compareNames设置为等于null，解除该函数的引用，\n就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，\n其他作用域(除了全局作用域)也都安全地销毁了。*/\n```\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n> 由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。   \n过度使用闭包可能会导致内存占用过多，   \nV8 javascript引擎会尝试回收被闭包占用的内存。\n\n##### 7.2.1 闭包和变量\n> 作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    \n\n闭包保存的是**整个变量对象**，而不是**某个特殊的值**。\n\n```javascript\nfunction createFunctions (){\n    var result = new Array();\n    \n    for (var i=0;i<10;i++){\n        result[i] = function(){\n            return i;\n        };\n    }\n    return result;\n}\n```\n这个函数会返回一个值。结果是每个函数都返回10.   \n因为每个函数的作用域中都保存着createFunctions()函数的活动对象，\n所以他们引用的都是同一个变量i。\n当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i\n的同一个变量对象，\n所以每个函数内部i的值都是10。\n\n![闭包](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png)\n```\nScopes[2]\nClosure (createFunctions)\ni:10\n```\n我们可以通过创建另一个匿名函数强制让闭包的行为符合预期\n\n```\nfunction createFunctions(){\n    var result = new Array();\n    \n    for(var i = 0;i < 10; i++){\n        result[i] = function(num){\n           return function(){\n               return num;\n           } \n        }(i)\n    }\n    return result;\n}\n```\n![closure-2](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png)\n\n改写后的createFunctions()函数，每个函数都会返回不同的索引值了。\n没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。\n这里的匿名函数有一个参数num，也就是最终要返回的值。\n在调用每个匿名函数时，我们出入变量i。\n由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。\n而在这个匿名函数内部，又创建了一个访问num的闭包，\n这样一来，result数组中的每个函数都有自己num变量的副本，\n因此就可以返回各自不同的数值了。\n\n##### 7.2.2关于this对象\n> this对象是在运行时基于函数的执行环境绑定的：   \n在全局函数中：thiis等于window；\n而在函数被当做某个对象的方法调用时：this等于那个对象。   \n不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；   \n在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。\n\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return function(){\n        return this.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"the window\"\n```\n为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？\n\n> 前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 `this` 和 `arguments`。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    var that = this;\n    return function(){\n        return that.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"my object\"\n```\n> tips: `this` 和 `arguments`也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。\n\n在几种特殊情况下，this的值可能会意外地改变\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return this.name\n  }\n};\n\nobject.getNameFunc();  //'my object'\n(object.getNameFunc)();  //'my object'\n(object.getNameFunc = object.getNameFunc)(); //'the window'\n```\n> 上述代码：第一种方式跟平常一样调用了`object.getNameFunc()`,返回`my object`,因为`this.name`就是`object.name`。   \n第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为`object.getNameFunc`和`object.getNameFunc`定义是相同的。    \n第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回`the window`。\n","source":"_posts/函数表达式.md","raw":"---\ntitle: 函数表达式\ndate: 2017-05-09 14:31:41\ntags: javascript\n---\n\n## 函数表达式\n\n1. 函数声明\n> 函数声明语法\n\n```javascript\nfunction funName(){\n    //函数体\n}\n```\nfunction是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。\n```javascript\nconsole.log(funName.name); //funName可以使用arguments.callee自调用\n\n```\n<!-- more -->\n> 重要的特性\n\n函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，\n意味着，**可以把函数声明放在调用它的语句后面**\n\n```javascript\nabc();  //\"1\"\nfunction abc(){\n    console.log('1');\n}\n```\n上述代码能够正常执行\n\n2. 函数表达式\n\n> 函数声明的几种形式\n- 最常见的一种形式\n```javascript\nvar funcName = function(){\n    //函数体\n}\n```\n\n创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为**匿名函数(anonymous function)**，因为function后面没有标识符。\n> 匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。\n\n函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。\n```javascript\nabc();\nvar abc = function(){\n    console.log(\"1\");\n}\n//报错：Uncaught TypeError: abc is not a function\n```\n\n理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：\n> 思考题\n```javascript\n//不要这么做\nif(isOk){\n    function sayHello(){\n        console.log('hello');\n    }\n}else{\n    function sayHello(){\n        console.log('world');\n    }\n}\n```\n结果是什么？\n> 从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义    \n实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。    \n但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，    \n因此使用这种方式很危险\n\n使用函数表达式就不会有这种问题\n```javascript\n//可以这样做\nvar sayHello;\nif(isOk){\n    sayHello = function(){\n        alert('hello');\n    }\n}else{\n    sayHello = function(){\n        alert('world!');\n    }\n}\n```\n能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。\n\n\n#### 7.1 递归\n> 递归函数是在一个函数通过名字调用自身的情况下构成的\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * count(num-1);\n    }\n}\n```\n> 上述代码是经典的阶乘函数    \n虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错\n\n```javascript\nvar anotherCount = count;\ncount = null;\nalert(anotherCount(4))  // 报错:count is not a function\n```\n>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。    \n但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错\"count is not a function\"\n\n> 在这种情况下，使用arguments.callee可以解决这个问题    \narguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用\n\n```javascript\nfunction count(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * arguments.callee(num-1);\n    }\n}\n```\n\n通过使用`arguments.callee`代替函数名，可以确保无论怎么样调用函数都不会出问题，    \n因此，在编写函数递归调用时，使用`arguments.callee`总比使用函数名更保险。\n\n> 不过在严格模式下，\"严格模式\"（strict mode）不能通过脚本访问`arguments.callee`，访问这个属性将会报错。    \n不过可以使用命名函数表达式来达成相同的结果。\n\n```javascript\n'strict mode'   //严格模式\nvar count = (function f(num){\n    if(num <= 1){\n        return 1;\n    }else{\n        return num * f(num-1);\n    }\n});\n```\n>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量   \n函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。\n\n#### 7.2 闭包\n###### 概念\n> 闭包是指有权访问另一个函数作用域中的变量的函数\n创建闭包最常见的方式，就是在一个函数内部创建另一个函数。\n\n为什么还能够访问内部变量？\n>  是因为内部函数的作用域中包含父函数的作用域。\n\n###### 作用域链\n> 当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。   \n-->   \n然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。   \n-->   \n但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，...     \n直至作为作用域链终点的全局执行环境。   \n\n> 在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。\n```javascript\nfunction compare(value1, value2){\n    if(value1 < value2){\n        return -1;\n    } else if(value1 > value2){\n        return 1;\n    } else {\n        return 0;\n    }\n}\n```\n上述代码：\n1. 定义compare()函数\n2. 在全局作用域中调用它\n3. 当调用compare()时，会创建一个包含arguments,value1,value2的活动对象\n4. 全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。\n\n\ncompare()函数执行时的作用域链关系图\n\n![图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1489995952212&di=de4fccb3e1965772e5ac835604c69019&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg)\n\n后台每个执行环境都有一个表示变量的对象----**变量对象**。   \n**全局环境**的变量对象始终存在，而像`compare()`函数这样的**局部环境**的变量对象   \n则只在*函数执行*的过程中存在。\n\n- 在创建`compare()`函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的`[[Scope]]`属性中\n- 当调用`compare()`函数时，会为函数创建一个*执行环境*，然后通过复制函数的`[[Scope]]`属性中的对象构建起执行环境的作用域链接。\n- 此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端\n\n> 对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：\n1. 本地变量对象\n2. 全局变量对象\n> 作用域链*本质上*是一个指向*变量对象*的*指针列表*，它只包含**引用**但不实际包含**对象**。\n\n在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。   \n一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）   \n但是，***闭包***的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁\n\n> [注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。\n\n```javascript\n//创建函数\nvar compareNames = createComparisonFunction(\"name\");\n//调用函数\nvar result = compareNames({name:\"Nicholas\"},{name:\"Greg\"});\n//解除对匿名函数的引用(以便释放内存)\ncompareNames = null;\n/*首先，创建的比较函数被保存在变量compareNames中，\n而通过将compareNames设置为等于null，解除该函数的引用，\n就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，\n其他作用域(除了全局作用域)也都安全地销毁了。*/\n```\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n> 由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。   \n过度使用闭包可能会导致内存占用过多，   \nV8 javascript引擎会尝试回收被闭包占用的内存。\n\n##### 7.2.1 闭包和变量\n> 作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    \n\n闭包保存的是**整个变量对象**，而不是**某个特殊的值**。\n\n```javascript\nfunction createFunctions (){\n    var result = new Array();\n    \n    for (var i=0;i<10;i++){\n        result[i] = function(){\n            return i;\n        };\n    }\n    return result;\n}\n```\n这个函数会返回一个值。结果是每个函数都返回10.   \n因为每个函数的作用域中都保存着createFunctions()函数的活动对象，\n所以他们引用的都是同一个变量i。\n当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i\n的同一个变量对象，\n所以每个函数内部i的值都是10。\n\n![闭包](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png)\n```\nScopes[2]\nClosure (createFunctions)\ni:10\n```\n我们可以通过创建另一个匿名函数强制让闭包的行为符合预期\n\n```\nfunction createFunctions(){\n    var result = new Array();\n    \n    for(var i = 0;i < 10; i++){\n        result[i] = function(num){\n           return function(){\n               return num;\n           } \n        }(i)\n    }\n    return result;\n}\n```\n![closure-2](http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png)\n\n改写后的createFunctions()函数，每个函数都会返回不同的索引值了。\n没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。\n这里的匿名函数有一个参数num，也就是最终要返回的值。\n在调用每个匿名函数时，我们出入变量i。\n由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。\n而在这个匿名函数内部，又创建了一个访问num的闭包，\n这样一来，result数组中的每个函数都有自己num变量的副本，\n因此就可以返回各自不同的数值了。\n\n##### 7.2.2关于this对象\n> this对象是在运行时基于函数的执行环境绑定的：   \n在全局函数中：thiis等于window；\n而在函数被当做某个对象的方法调用时：this等于那个对象。   \n不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；   \n在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。\n\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return function(){\n        return this.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"the window\"\n```\n为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？\n\n> 前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 `this` 和 `arguments`。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。\n\n![](http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg)\n\n不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    var that = this;\n    return function(){\n        return that.name\n    }\n  }\n};\n\nobject.getNameFunc()();   //\"my object\"\n```\n> tips: `this` 和 `arguments`也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。\n\n在几种特殊情况下，this的值可能会意外地改变\n```\nvar name = \"the window\";\nvar object = {\n  name:\"my object\",\n  getNameFunc:function(){\n    return this.name\n  }\n};\n\nobject.getNameFunc();  //'my object'\n(object.getNameFunc)();  //'my object'\n(object.getNameFunc = object.getNameFunc)(); //'the window'\n```\n> 上述代码：第一种方式跟平常一样调用了`object.getNameFunc()`,返回`my object`,因为`this.name`就是`object.name`。   \n第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为`object.getNameFunc`和`object.getNameFunc`定义是相同的。    \n第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回`the window`。\n","slug":"函数表达式","published":1,"updated":"2017-05-09T07:52:19.645Z","_id":"cj2h9ae580005mo90idjb8m0t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><ol>\n<li>函数声明<blockquote>\n<p>函数声明语法</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>function是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(funName.name); <span class=\"comment\">//funName可以使用arguments.callee自调用</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>重要的特性</p>\n</blockquote>\n<p>函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，<br>意味着，<strong>可以把函数声明放在调用它的语句后面</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();  <span class=\"comment\">//\"1\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码能够正常执行</p>\n<ol>\n<li>函数表达式</li>\n</ol>\n<blockquote>\n<p>函数声明的几种形式</p>\n<ul>\n<li>最常见的一种形式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为<strong>匿名函数(anonymous function)</strong>，因为function后面没有标识符。</p>\n<blockquote>\n<p>匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。</p>\n</blockquote>\n<p>函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();</div><div class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//报错：Uncaught TypeError: abc is not a function</span></div></pre></td></tr></table></figure></p>\n<p>理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：</p>\n<blockquote>\n<p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不要这么做</span></div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是什么？</p>\n<blockquote>\n<p>从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义<br>实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。<br>但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，<br>因此使用这种方式很危险</p>\n</blockquote>\n<p>使用函数表达式就不会有这种问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可以这样做</span></div><div class=\"line\"><span class=\"keyword\">var</span> sayHello;</div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'world!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。</p>\n<h4 id=\"7-1-递归\"><a href=\"#7-1-递归\" class=\"headerlink\" title=\"7.1 递归\"></a>7.1 递归</h4><blockquote>\n<p>递归函数是在一个函数通过名字调用自身的情况下构成的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * count(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上述代码是经典的阶乘函数<br>虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anotherCount = count;</div><div class=\"line\">count = <span class=\"literal\">null</span>;</div><div class=\"line\">alert(anotherCount(<span class=\"number\">4</span>))  <span class=\"comment\">// 报错:count is not a function</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。<br>但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错”count is not a function”</p>\n<p>在这种情况下，使用arguments.callee可以解决这个问题<br>arguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过使用<code>arguments.callee</code>代替函数名，可以确保无论怎么样调用函数都不会出问题，<br>因此，在编写函数递归调用时，使用<code>arguments.callee</code>总比使用函数名更保险。</p>\n<blockquote>\n<p>不过在严格模式下，”严格模式”（strict mode）不能通过脚本访问<code>arguments.callee</code>，访问这个属性将会报错。<br>不过可以使用命名函数表达式来达成相同的结果。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'strict mode'</span>   <span class=\"comment\">//严格模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> count = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * f(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量<br>函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。</p>\n</blockquote>\n<h4 id=\"7-2-闭包\"><a href=\"#7-2-闭包\" class=\"headerlink\" title=\"7.2 闭包\"></a>7.2 闭包</h4><h6 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h6><blockquote>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数<br>创建闭包最常见的方式，就是在一个函数内部创建另一个函数。</p>\n</blockquote>\n<p>为什么还能够访问内部变量？</p>\n<blockquote>\n<p> 是因为内部函数的作用域中包含父函数的作用域。</p>\n</blockquote>\n<h6 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h6><blockquote>\n<p>当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。<br>–&gt;<br>然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。<br>–&gt;<br>但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，…<br>直至作为作用域链终点的全局执行环境。   </p>\n<p>在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1, value2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(value1 &lt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>上述代码：</p>\n<ol>\n<li>定义compare()函数</li>\n<li>在全局作用域中调用它</li>\n<li>当调用compare()时，会创建一个包含arguments,value1,value2的活动对象</li>\n<li>全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。</li>\n</ol>\n<p>compare()函数执行时的作用域链关系图</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489995952212&amp;di=de4fccb3e1965772e5ac835604c69019&amp;imgtype=0&amp;src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg\" alt=\"图片\"></p>\n<p>后台每个执行环境都有一个表示变量的对象—-<strong>变量对象</strong>。<br><strong>全局环境</strong>的变量对象始终存在，而像<code>compare()</code>函数这样的<strong>局部环境</strong>的变量对象<br>则只在<em>函数执行</em>的过程中存在。</p>\n<ul>\n<li>在创建<code>compare()</code>函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的<code>[[Scope]]</code>属性中</li>\n<li>当调用<code>compare()</code>函数时，会为函数创建一个<em>执行环境</em>，然后通过复制函数的<code>[[Scope]]</code>属性中的对象构建起执行环境的作用域链接。</li>\n<li>此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端</li>\n</ul>\n<blockquote>\n<p>对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：</p>\n<ol>\n<li>本地变量对象</li>\n<li>全局变量对象<br>作用域链<em>本质上</em>是一个指向<em>变量对象</em>的<em>指针列表</em>，它只包含<strong>引用</strong>但不实际包含<strong>对象</strong>。</li>\n</ol>\n</blockquote>\n<p>在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。<br>一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）<br>但是，<strong><em>闭包</em></strong>的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁</p>\n<blockquote>\n<p>[注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> compareNames = createComparisonFunction(<span class=\"string\">\"name\"</span>);</div><div class=\"line\"><span class=\"comment\">//调用函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = compareNames(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nicholas\"</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Greg\"</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//解除对匿名函数的引用(以便释放内存)</span></div><div class=\"line\">compareNames = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"comment\">/*首先，创建的比较函数被保存在变量compareNames中，</span></div><div class=\"line\">而通过将compareNames设置为等于null，解除该函数的引用，</div><div class=\"line\">就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，</div><div class=\"line\">其他作用域(除了全局作用域)也都安全地销毁了。*/</div></pre></td></tr></table></figure>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<blockquote>\n<p>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。<br>过度使用闭包可能会导致内存占用过多，<br>V8 javascript引擎会尝试回收被闭包占用的内存。</p>\n</blockquote>\n<h5 id=\"7-2-1-闭包和变量\"><a href=\"#7-2-1-闭包和变量\" class=\"headerlink\" title=\"7.2.1 闭包和变量\"></a>7.2.1 闭包和变量</h5><blockquote>\n<p>作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    </p>\n</blockquote>\n<p>闭包保存的是<strong>整个变量对象</strong>，而不是<strong>某个特殊的值</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个函数会返回一个值。结果是每个函数都返回10.<br>因为每个函数的作用域中都保存着createFunctions()函数的活动对象，<br>所以他们引用的都是同一个变量i。<br>当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i<br>的同一个变量对象，<br>所以每个函数内部i的值都是10。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png\" alt=\"闭包\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scopes[2]</div><div class=\"line\">Closure (createFunctions)</div><div class=\"line\">i:10</div></pre></td></tr></table></figure></p>\n<p>我们可以通过创建另一个匿名函数强制让闭包的行为符合预期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\">    </div><div class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</div><div class=\"line\">        result[i] = function(num)&#123;</div><div class=\"line\">           return function()&#123;</div><div class=\"line\">               return num;</div><div class=\"line\">           &#125; </div><div class=\"line\">        &#125;(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png\" alt=\"closure-2\"></p>\n<p>改写后的createFunctions()函数，每个函数都会返回不同的索引值了。<br>没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。<br>这里的匿名函数有一个参数num，也就是最终要返回的值。<br>在调用每个匿名函数时，我们出入变量i。<br>由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。<br>而在这个匿名函数内部，又创建了一个访问num的闭包，<br>这样一来，result数组中的每个函数都有自己num变量的副本，<br>因此就可以返回各自不同的数值了。</p>\n<h5 id=\"7-2-2关于this对象\"><a href=\"#7-2-2关于this对象\" class=\"headerlink\" title=\"7.2.2关于this对象\"></a>7.2.2关于this对象</h5><blockquote>\n<p>this对象是在运行时基于函数的执行环境绑定的：<br>在全局函数中：thiis等于window；<br>而在函数被当做某个对象的方法调用时：this等于那个对象。<br>不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；<br>在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return this.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;the window&quot;</div></pre></td></tr></table></figure>\n<p>为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？</p>\n<blockquote>\n<p>前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 <code>this</code> 和 <code>arguments</code>。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。</p>\n</blockquote>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<p>不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return that.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;my object&quot;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>tips: <code>this</code> 和 <code>arguments</code>也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。</p>\n</blockquote>\n<p>在几种特殊情况下，this的值可能会意外地改变<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc)();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc = object.getNameFunc)(); //&apos;the window&apos;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上述代码：第一种方式跟平常一样调用了<code>object.getNameFunc()</code>,返回<code>my object</code>,因为<code>this.name</code>就是<code>object.name</code>。<br>第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为<code>object.getNameFunc</code>和<code>object.getNameFunc</code>定义是相同的。<br>第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回<code>the window</code>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><ol>\n<li>函数声明<blockquote>\n<p>函数声明语法</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>function是关键字，然后是函数名字，还有一个非标准的name属性，通过这个属性可以访问到函数指定的名字。这个属性的值永远等于跟在function关键字后面的标识符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(funName.name); <span class=\"comment\">//funName可以使用arguments.callee自调用</span></div></pre></td></tr></table></figure></p>","more":"<blockquote>\n<p>重要的特性</p>\n</blockquote>\n<p>函数声明提升(function declaration hoisting)，意思是在执行代码时会先读取函数声明，<br>意味着，<strong>可以把函数声明放在调用它的语句后面</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();  <span class=\"comment\">//\"1\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码能够正常执行</p>\n<ol>\n<li>函数表达式</li>\n</ol>\n<blockquote>\n<p>函数声明的几种形式</p>\n<ul>\n<li>最常见的一种形式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>创建一个函数并将它赋值给变量funcName。这种情况下创建的函数为<strong>匿名函数(anonymous function)</strong>，因为function后面没有标识符。</p>\n<blockquote>\n<p>匿名函数有时候也叫拉姆达函数，匿名函数的name属性是空字符串。</p>\n</blockquote>\n<p>函数表达式与其他表达式一样，在使用前必须先赋值，要不能会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">abc();</div><div class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//报错：Uncaught TypeError: abc is not a function</span></div></pre></td></tr></table></figure></p>\n<p>理解函数提升的关键，就是理解函数声明与函数表达式之间的区别：</p>\n<blockquote>\n<p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不要这么做</span></div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>结果是什么？</p>\n<blockquote>\n<p>从表面上看，上述代码表示在isOk为true时，使用一个sayHello()的定义，否则，使用另一个sayHello()的定义<br>实际上，在ECMAScript中属于无效语法，javascript引擎会尝试修正错误，将其转换为合理的状态。<br>但是问题是各个浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第一个声明，<br>因此使用这种方式很危险</p>\n</blockquote>\n<p>使用函数表达式就不会有这种问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可以这样做</span></div><div class=\"line\"><span class=\"keyword\">var</span> sayHello;</div><div class=\"line\"><span class=\"keyword\">if</span>(isOk)&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'world!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>能够创建函数再赋值给变量，也就能够把函数作为其他函数的返回值。</p>\n<h4 id=\"7-1-递归\"><a href=\"#7-1-递归\" class=\"headerlink\" title=\"7.1 递归\"></a>7.1 递归</h4><blockquote>\n<p>递归函数是在一个函数通过名字调用自身的情况下构成的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * count(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上述代码是经典的阶乘函数<br>虽然这个函数从表面上看来没什么问题，但下面的代码却可能导致它出错</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anotherCount = count;</div><div class=\"line\">count = <span class=\"literal\">null</span>;</div><div class=\"line\">alert(anotherCount(<span class=\"number\">4</span>))  <span class=\"comment\">// 报错:count is not a function</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码，先把函数count()保存在变量anotherCount中，然后将count变量设置为null，结果指向原始函数的引用只剩下一个。<br>但是在调用anotherCount()时，需要执行count()，而count已经不在是一个函数，所以导致出错”count is not a function”</p>\n<p>在这种情况下，使用arguments.callee可以解决这个问题<br>arguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现函数的递归调用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过使用<code>arguments.callee</code>代替函数名，可以确保无论怎么样调用函数都不会出问题，<br>因此，在编写函数递归调用时，使用<code>arguments.callee</code>总比使用函数名更保险。</p>\n<blockquote>\n<p>不过在严格模式下，”严格模式”（strict mode）不能通过脚本访问<code>arguments.callee</code>，访问这个属性将会报错。<br>不过可以使用命名函数表达式来达成相同的结果。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'strict mode'</span>   <span class=\"comment\">//严格模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> count = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * f(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以上代码创建一个名为f()的命名函数表达式，然后将它赋值给变量count。即便是函数赋值给另一个变量<br>函数的名字f仍让有效，所以递归调用照样能正常完成。这种方式在严格模式和非严格模式都行的通。</p>\n</blockquote>\n<h4 id=\"7-2-闭包\"><a href=\"#7-2-闭包\" class=\"headerlink\" title=\"7.2 闭包\"></a>7.2 闭包</h4><h6 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h6><blockquote>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数<br>创建闭包最常见的方式，就是在一个函数内部创建另一个函数。</p>\n</blockquote>\n<p>为什么还能够访问内部变量？</p>\n<blockquote>\n<p> 是因为内部函数的作用域中包含父函数的作用域。</p>\n</blockquote>\n<h6 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h6><blockquote>\n<p>当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链接。<br>–&gt;<br>然后使用arguments和其他命名参数的值来初始化函数的活动对象（activation object）。<br>–&gt;<br>但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，…<br>直至作为作用域链终点的全局执行环境。   </p>\n<p>在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1, value2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(value1 &lt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt; value2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>上述代码：</p>\n<ol>\n<li>定义compare()函数</li>\n<li>在全局作用域中调用它</li>\n<li>当调用compare()时，会创建一个包含arguments,value1,value2的活动对象</li>\n<li>全局执行环境的变量对象（包括result和compare）在compare()执行的作用域链中处于第二位。</li>\n</ol>\n<p>compare()函数执行时的作用域链关系图</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489995952212&amp;di=de4fccb3e1965772e5ac835604c69019&amp;imgtype=0&amp;src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F740839%2F201509%2F740839-20150914151133867-323877975.jpg\" alt=\"图片\"></p>\n<p>后台每个执行环境都有一个表示变量的对象—-<strong>变量对象</strong>。<br><strong>全局环境</strong>的变量对象始终存在，而像<code>compare()</code>函数这样的<strong>局部环境</strong>的变量对象<br>则只在<em>函数执行</em>的过程中存在。</p>\n<ul>\n<li>在创建<code>compare()</code>函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的<code>[[Scope]]</code>属性中</li>\n<li>当调用<code>compare()</code>函数时，会为函数创建一个<em>执行环境</em>，然后通过复制函数的<code>[[Scope]]</code>属性中的对象构建起执行环境的作用域链接。</li>\n<li>此后，又有一个活动对象（在此作为变量对象使用）被创建并推入执行环境作用域链的前端</li>\n</ul>\n<blockquote>\n<p>对于上述例子而言，compare()函数的执行环境，其作用域链中包含两个变量：</p>\n<ol>\n<li>本地变量对象</li>\n<li>全局变量对象<br>作用域链<em>本质上</em>是一个指向<em>变量对象</em>的<em>指针列表</em>，它只包含<strong>引用</strong>但不实际包含<strong>对象</strong>。</li>\n</ol>\n</blockquote>\n<p>在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。<br>一般来讲，当函数执行完毕后，局部活动对象机会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）<br>但是，<strong><em>闭包</em></strong>的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数(即外部函数)的活动对象添加到它的作用域链中。在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才被销毁</p>\n<blockquote>\n<p>[注意]由于闭包会携带包含它的函数的作用域链，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以只在绝对必要时使用闭包。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> compareNames = createComparisonFunction(<span class=\"string\">\"name\"</span>);</div><div class=\"line\"><span class=\"comment\">//调用函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = compareNames(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nicholas\"</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Greg\"</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//解除对匿名函数的引用(以便释放内存)</span></div><div class=\"line\">compareNames = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"comment\">/*首先，创建的比较函数被保存在变量compareNames中，</span></div><div class=\"line\">而通过将compareNames设置为等于null，解除该函数的引用，</div><div class=\"line\">就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，</div><div class=\"line\">其他作用域(除了全局作用域)也都安全地销毁了。*/</div></pre></td></tr></table></figure>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<blockquote>\n<p>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。<br>过度使用闭包可能会导致内存占用过多，<br>V8 javascript引擎会尝试回收被闭包占用的内存。</p>\n</blockquote>\n<h5 id=\"7-2-1-闭包和变量\"><a href=\"#7-2-1-闭包和变量\" class=\"headerlink\" title=\"7.2.1 闭包和变量\"></a>7.2.1 闭包和变量</h5><blockquote>\n<p>作用域链的这种配置机制引起了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值。    </p>\n</blockquote>\n<p>闭包保存的是<strong>整个变量对象</strong>，而不是<strong>某个特殊的值</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个函数会返回一个值。结果是每个函数都返回10.<br>因为每个函数的作用域中都保存着createFunctions()函数的活动对象，<br>所以他们引用的都是同一个变量i。<br>当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i<br>的同一个变量对象，<br>所以每个函数内部i的值都是10。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20170321125523.png\" alt=\"闭包\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scopes[2]</div><div class=\"line\">Closure (createFunctions)</div><div class=\"line\">i:10</div></pre></td></tr></table></figure></p>\n<p>我们可以通过创建另一个匿名函数强制让闭包的行为符合预期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\">    </div><div class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</div><div class=\"line\">        result[i] = function(num)&#123;</div><div class=\"line\">           return function()&#123;</div><div class=\"line\">               return num;</div><div class=\"line\">           &#125; </div><div class=\"line\">        &#125;(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/White-Quality/969463/o_closure.png\" alt=\"closure-2\"></p>\n<p>改写后的createFunctions()函数，每个函数都会返回不同的索引值了。<br>没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。<br>这里的匿名函数有一个参数num，也就是最终要返回的值。<br>在调用每个匿名函数时，我们出入变量i。<br>由于函数参数是按值传递的，所以就会将变量i的当前值赋值给参数num。<br>而在这个匿名函数内部，又创建了一个访问num的闭包，<br>这样一来，result数组中的每个函数都有自己num变量的副本，<br>因此就可以返回各自不同的数值了。</p>\n<h5 id=\"7-2-2关于this对象\"><a href=\"#7-2-2关于this对象\" class=\"headerlink\" title=\"7.2.2关于this对象\"></a>7.2.2关于this对象</h5><blockquote>\n<p>this对象是在运行时基于函数的执行环境绑定的：<br>在全局函数中：thiis等于window；<br>而在函数被当做某个对象的方法调用时：this等于那个对象。<br>不过匿名函数的执行环境具有全局性，因此匿名函数的this对象通常也指向window；<br>在通过call()和apply()改变函数执行环境的情况下，this就会指向其他对象。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return this.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;the window&quot;</div></pre></td></tr></table></figure>\n<p>为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？</p>\n<blockquote>\n<p>前面提到过，每个函数再被调用的时候会自动取得两个特殊变量 <code>this</code> 和 <code>arguments</code>。内部函数再搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量(详见下图)。</p>\n</blockquote>\n<p><img src=\"http://images2015.cnblogs.com/blog/740839/201509/740839-20150914151358039-898068634.jpg\" alt=\"\"></p>\n<p>不过，把外部函数作用域中的this对象保存在一个闭包能够访问到的变量里面，就可以让闭包访问该对象了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    var that = this;</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        return that.name</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc()();   //&quot;my object&quot;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>tips: <code>this</code> 和 <code>arguments</code>也存在同样的问题，如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。</p>\n</blockquote>\n<p>在几种特殊情况下，this的值可能会意外地改变<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;the window&quot;;</div><div class=\"line\">var object = &#123;</div><div class=\"line\">  name:&quot;my object&quot;,</div><div class=\"line\">  getNameFunc:function()&#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">object.getNameFunc();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc)();  //&apos;my object&apos;</div><div class=\"line\">(object.getNameFunc = object.getNameFunc)(); //&apos;the window&apos;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上述代码：第一种方式跟平常一样调用了<code>object.getNameFunc()</code>,返回<code>my object</code>,因为<code>this.name</code>就是<code>object.name</code>。<br>第二种方式在调用这个方法前添加了括号，虽然添加了括号，就好像只是在引用一个函数，但this的值得到了维持，因为<code>object.getNameFunc</code>和<code>object.getNameFunc</code>定义是相同的。<br>第三种方式：先执行了一条赋值语句，然后在调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持，结果返回<code>the window</code>。</p>\n</blockquote>"},{"title":"终于成功了","date":"2017-05-08T14:28:28.000Z","_content":"终于成功了，搞了老子一天了，\n让我激动一会儿~~","source":"_posts/终于成功了.md","raw":"---\ntitle: 终于成功了\ndate: 2017-05-08 22:28:28\ntags:\n---\n终于成功了，搞了老子一天了，\n让我激动一会儿~~","slug":"终于成功了","published":1,"updated":"2017-05-09T07:45:53.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2h9ae5a0006mo9030fphvs8","content":"<p>终于成功了，搞了老子一天了，<br>让我激动一会儿~~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于成功了，搞了老子一天了，<br>让我激动一会儿~~</p>\n"},{"title":"add hello world ","date":"2017-05-08T06:16:45.000Z","_content":"你好，欢迎来到我的个人技术博客。\n","source":"_posts/add-hello-world.md","raw":"---\ntitle: 'add hello world '\ndate: 2017-05-08 14:16:45\ntags:\n---\n你好，欢迎来到我的个人技术博客。\n","slug":"add-hello-world","published":1,"updated":"2017-05-09T07:45:53.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2h9ae5g0009mo90xnlw9tt2","content":"<p>你好，欢迎来到我的个人技术博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你好，欢迎来到我的个人技术博客。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2h9ae4u0001mo90au7bmk17","tag_id":"cj2h9csu900009490c98v8osm","_id":"cj2h9csua00019490pkn3jage"},{"post_id":"cj2h9ae580005mo90idjb8m0t","tag_id":"cj2h9csu900009490c98v8osm","_id":"cj2h9cwgn00029490qqdj6a7p"}],"Tag":[{"name":"javascript, location","_id":"cj2h9ae500003mo90e3ugh0ip"},{"name":"javascript 函数表达式","_id":"cj2h9ae5f0007mo90iaibo61q"},{"name":"javascript","_id":"cj2h9csu900009490c98v8osm"}]}}